{"version":3,"file":"focus-fly.umd.min.js","sources":["../utils.js","../index.js"],"sourcesContent":["/** Object.prototype.toString.call 快捷方式 */\nexport const objToStr = obj => Object.prototype.toString.call(obj);\n\n/** 参数是否是对象 */\nexport const isObj = obj => objToStr(obj) === \"[object Object]\";\n\n/** 是否为函数 */\nexport const isFun = fun => objToStr(fun) === \"[object Function]\";\n\n/** document.activeElement 的快捷方式 */\nexport const getActiveElement = () => document.activeElement;\n\n/** document.querySelector 的快捷方式 */\nexport const querySelector = str => document.querySelector(str);\n\n/** 通过字符串查找节点，或者直接返回节点 */\nexport const element = e => typeof e === \"string\" ? querySelector(e) : e;\n\n/** 滴答 */\nexport const tick = function(fn) {\n  setTimeout(fn, 0);\n};\n\n/** 是否是 input 可 select 的元素 */\nexport const isSelectableInput = function(node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\n/** 是否按下了 enter */\nexport const isEnterEvent = function(e) {\n  return e.key === \"Enter\" || e.keyCode === 13;\n};\n\n/** 按键是否是 esc */\nexport const isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\n/** 按键是否是 tab */\nexport const isTabEvent = function(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n/** 是否是向前的 tab */\nexport const isTabForward = function(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n/** 是否是向后的 tab */\nexport const isTabBackward = function(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\n/** 找到两个元素的最小公共祖先元素 */\nexport const findLowestCommonAncestorNode = function(x, y) {\n  if (x == null || y == null) return null;\n  if (x.contains(y)) return x;\n  if (y.contains(x)) return y;\n\n  const range = new Range();\n  range.setStartBefore(x);\n  range.setEndAfter(y);\n  if (range.collapsed) {\n     range.setStartBefore(y);\n     range.setEndAfter(x);\n  }\n  return range.commonAncestorContainer;\n};","import { objToStr, isObj, isFun, getActiveElement, element, tick, isSelectableInput, isEnterEvent, isEscapeEvent, isTabForward, isTabBackward, findLowestCommonAncestorNode } from \"./utils\";\n\n/** 聚焦，如果是 input，则聚焦后选中 */\nconst focus = function(e) {\n  e.focus();\n  if (isSelectableInput(e))\n    e.select();\n};\n\n/** 尝试聚焦，如果聚焦失效，则下个 setTimeout 再次聚焦 */\nconst tickFocus = function(e) {\n  if (e == null) tick(() => e && focus(e));\n  else focus(e);\n};\n\n/** 获取根节点 */\nconst getRootNode = function(rootStr, listHead, listTail) {\n  return element(rootStr) ?? findLowestCommonAncestorNode(listHead, listTail);\n};\n\n/** 获取列表节点 */\nconst getListNodes = function(listAry) {\n  const list = listAry.map(item => element(item)).filter(item => item != null);\n  const head = list[0];\n  const tail = list.slice(-1)[0];\n  return { list, head, tail };\n}\n\n/** 获取封面节点 */\nconst getCoverNode = function(coverStr, coverIsRoot, root) {\n  return coverIsRoot ? root : element(coverStr);\n}\n\n/** 获取关键节点 */\nconst getKeyNodes = function(originRoot, originList, originCover, coverIsRoot) {\n  const { list, head, tail } = getListNodes(originList);\n  const root = getRootNode(originRoot, head, tail);\n  const cover = getCoverNode(originCover, coverIsRoot, root);\n\n  return {\n    root,\n    list, head, tail,\n    cover,\n  };\n};\n\n/** 用于处理节点属性可以传递数组的情况，用于入口和出口 */\nconst pickNodesAry = function(acc, cur) {\n  const isAryNodes = Array.isArray(cur.node);\n  const nodes = isAryNodes ? cur.node.map(n => ({\n    ...cur,\n    node: n,\n  })) : cur;\n  return acc.concat(nodes);\n};\n\n/** 获取分割的出口 */\nconst splitExits = function(exits, root) {\n  /** 生效的节点是否在根元素内部（列表中） */\n  const isInnerRoot = node => isFun(node) || (node != null && root.contains(element(node))) || node == null;\n\n  const [keyExits, clickExits, focusExits, clickExits_wild, focusExits_wild, outListExits] = exits.reduce((acc, e) => {\n    let [key, click, focus, click_wild, focus_wild, outList] = acc;\n    const includeType = type => e.type?.includes(type);\n    if (isInnerRoot(e.node)) {\n      if (includeType(\"keydown\")) key = key.concat(e);\n      if (includeType(\"click\")) click = click.concat(e);\n      if (includeType(\"focus\")) focus = focus.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    } else {\n      if (includeType(\"click\")) click_wild = click_wild.concat(e);\n      if (includeType(\"focus\")) focus_wild = focus_wild.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    }\n    return [key, click, focus, click_wild, focus_wild, outList];\n  }, new Array(6).fill([]));\n\n  const hasClickExits = clickExits.length > 0;\n  const hasFocusExits = focusExits.length > 0;\n  const hasKeyExits = keyExits.length > 0;\n  \n  return {\n    keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n    clickExits_wild, focusExits_wild,\n    outListExits,\n  };\n}\n\n/** 获取（生成）出口 */\nconst getExits = function(exit, onEscape, enabledCover, cover, trigger, delayToBlur) {\n\n  let tempExits = [].concat(exit).filter(o => o != null)\n    .map(ele => isObj(ele) ? ele : { node: ele })\n    .map(e => ({\n      ...e,\n      preventDefault: e.preventDefault ?? true,\n      delay: e.delay ?? delayToBlur,\n      // undefined 表示用户没有主动设置\n      type: e.type === undefined ? [e.key == null ? '' : \"keydown\", e.node == null ? '' : \"click\"].filter(t => t !== '') : [].concat(e.type),\n    }))\n    .reduce(pickNodesAry, []);\n  let _onEscape = isFun(onEscape) ? onEscape : onEscape === true ? tempExits[0]?.on ?? (() => {}) : onEscape;\n  /** 按下 esc 的出口 */\n  const escapeExit = isFun(_onEscape) ? {\n    node: null,\n    key: isEscapeEvent,\n    on: _onEscape,\n    target: enabledCover ? cover : trigger,\n    type: [\"keydown\"],\n  } : null;\n  const exits = [escapeExit].concat(tempExits).filter(e => e != null);\n\n  return exits;\n};\n\n/** 延迟执行某些操作 */\nconst delayToProcess = function(delay, processor) {\n\n  const { promiseDelay, callbackDelay, commonDelay, delayRes } = getDelayType();\n  if (promiseDelay) delayRes.then(processor);\n  else if (callbackDelay) {} // 已执行完毕\n  else if (commonDelay) processor();\n\n  /** 获取聚焦或失焦时延迟的类型 */\n  function getDelayType() {\n\n    const isFunctionDelay = isFun(delay);\n    const delayRes = isFunctionDelay && delay(processor);\n    const promiseDelay = isFunctionDelay && objToStr(delayRes) === \"[object Promise]\" && typeof delayRes.then === \"function\";\n    const callbackDelay = isFunctionDelay && !promiseDelay;\n    const commonDelay = !promiseDelay && !callbackDelay; // 立即执行\n    return {\n      promiseDelay,\n      callbackDelay,\n      commonDelay,\n      delayRes,\n    };\n  }\n};\n\n/** 获取出口或者入口的目标 */\nconst getTarget = function(target, cover, list, root, enabledCover, activeIndex, defaultTarget, e) {\n  // 空 target 走默认\n  if (target == null || target === true) {\n    if (enabledCover) return cover;\n    else return defaultTarget;\n  }\n  // 函数 target 则传入节点执行\n  else if (isFun(target)) {\n    const gotTarget = target({ e, list, cover, root, last: list[activeIndex], lastI: activeIndex });\n    if (gotTarget == null || gotTarget === true) {\n      if (enabledCover) return cover;\n      else return defaultTarget;\n    }\n    return gotTarget;\n  }\n  // 选择器字符串或者节点，则直接获取\n  else return element(target);\n};\n\n/** 保存的监听事件信息，方便监听和移除监听 */\nclass ListenersCache {\n  cache = [];\n  isEmpty = true;\n  push(node, type, handler) {\n    this.isEmpty = false;\n    this.cache.push({\n      node,\n      type,\n      handler,\n    });\n  }\n  clean() {\n    this.cache = [];\n    this.isEmpty = true;\n  }\n  addListeners() {\n    this.cache.forEach(l => l.node?.addEventListener(l.type, l.handler));\n  }\n  removeListeners() {\n    this.cache.forEach(l => l.node?.removeEventListener(l.type, l.handler));\n    this.clean();\n  }\n}\n\n/** 按键转发的缓存 */\nclass KeyForwardCache {\n  cache = new Map();\n  has(id) {\n    return this.cache.has(id);\n  }\n  push(id, node, handler) {\n    if (this.has(id)) return;\n    node.addEventListener(\"keydown\", handler);\n    this.cache.set(id, {\n      node,\n      handler,\n    })\n  }\n  remove(id) {\n    const ids = [].concat(id);\n    ids.forEach(id => this.cache.get(id).node.removeEventListener(\"keydown\", this.cache.get(id).handler));\n  }\n}\n\n/** 保存列表数据 */\nclass TabList {\n  data = [];\n  head = null;\n  tail = null;\n  prevI = -1;\n  curI = -1;\n  _prev = null;\n  _cur = null;\n  rangeBeforePrevCallback = false; // 范围模式下，当前是否在调用钩子回调（onMove、onPrev）之前\n  rangeBeforeNextCallback = false; // 范围模式下，当前是否在调用钩子回调（onMove、onNext）之前\n  get prev() {\n    return this._prev || this.data[this.prevI] || null; // _prev 可能由于 dom 未加载而为 null，为 null 则通过 prevI 取值\n  };\n  get cur() {\n    return this._cur || this.data[this.curI] || null;\n  };\n  set prev(v) {\n    this._prev = v;\n  };\n  set cur(v) {\n    this._cur = v;\n  };\n  update(list) {\n    this.data.splice(0, this.data.length);\n    Array.prototype.push.apply(this.data, list);\n    this.head = list[0];\n    this.tail = list.at(-1);\n  };\n  isEmpty() {\n    return this.data.length === 0;\n  };\n  has(i) {\n    return !!this.data[i];\n  };\n  record(cur, curI) {\n    this.recordPrev(this.cur, this.curI);\n    this.recordCur(cur, curI);\n  };\n  recordSequnce(cur, curI) {\n    if (this.curI === curI // this.curI 和 curI 必须不同\n      || (this.curI < 0 && curI < 0)) // curI 为 -1 后，不会再次更新新的 -1\n      return;\n    this.record(cur, curI);\n  };\n  recordRange(cur) {\n    if (this.cur === cur || (this.cur == null && cur == null))\n      return;\n    this.record(cur, -1);\n  };\n  recordPrev(prev, prevI) {\n    this.prevI = prevI < 0 ? -1 : prevI;\n    this.prev = prev || null;\n  };\n  recordCur(cur, curI) {\n    this.curI = curI < 0 ? -1 : curI;\n    this.cur = cur || null;\n  };\n  recordSequenceByIdx(curI) {\n    this.recordSequnce(this.data[curI], curI);\n  };\n}\n\nconst focusFly = (...props) => {\n  const offset = 0 - (props[0] instanceof Array);\n  const rootNode = props[0 + offset];\n  const subNodes = props[1 + offset];\n  const options  = props[2 + offset] ?? {};\n\n  if (!(Array.isArray(subNodes) && subNodes.length > 1))\n    throw new Error(\"请至少传入一个数组，数组至少包含两个可聚焦元素，用来表示列表的头和尾。\");\n\n  const {\n    /** move: tab 序列，指定可以聚焦的元素，聚焦 list 内的元素 */\n    sequence,\n    /** move: 是否循环，设置后，尾元素的下个焦点是头元素，头元素的上个焦点是尾元素 */\n    loop,\n    /** move: 自定义前进焦点函数 */\n    next,\n    /** move: 自定义后退焦点函数 */\n    prev,\n    /** focus/blur: 触发器，如果使用 focusFly.enter 则不用设置，如果使用 entry.selector 则不用设置 */\n    trigger,\n    /** focus: 触发触发器的配置 */\n    entry,\n    /** blur: 触发退出触发器的配置 */\n    exit,\n    /** blur: 按下 esc 的行为，如果未设置，则取 exit.on */\n    onEscape,\n    /** 点击列表单项的响应，行为 */\n    onClick,\n    /** 移动的时候触发 */\n    onMove,\n    /** cover: 封面，默认情况，触发入口后首先聚焦封面，而不是子元素 */\n    cover: origin_cover,\n    /** 初始的列表中聚焦元素的序号 */\n    initialActive,\n    /** 矫正列表的焦点 */\n    correctionTarget,\n    /** 延迟挂载非触发器元素的事件，可以是一个返回 promise 的函数，可以是一个接收回调函数的函数 */\n    delayToFocus,\n    /** 延迟失焦，触发出口后等待执行 delayToBlur 完成后失焦 */\n    delayToBlur,\n    /** 每次退出列表回到入口是否移除列表事件 */\n    removeListenersEachExit = true,\n    /** 每次进入列表是否移除入口事件 */\n    removeListenersEachEnter,\n    /** 每次退出列表是否添加入口监听事件 */\n    addEntryListenersEachExit = true,\n    /** 阻止（列表移动）冒泡或捕获 */\n    stopPropagation: listStopPropagation = false,\n    /** 阻止（列表移动）默认行为 */\n    preventDefault,\n    /** 手动添加和移除监听事件，入口、列表、出口的监听事件，`removeListenersEachExit` 和 `removeListenersEachEnter` 将失效 */\n    manual,\n    /** 用于抹平 Safari 不同于其它浏览器，点击后 button 之类的元素不会被聚焦的问题 */\n    allowSafariToFocusAfterMousedown = true,\n    /** 用于内部调试 */\n    // demo = false,\n  } = options;\n\n  /** 入口们 */\n  const entries = [].concat(entry) // 转为数组\n    .filter(o => o != null) // 过滤空值\n    .map(ele => isObj(ele) ? ele : { node: ele }) // 元素转为对象，并且默认元素的值被看作对象的 node 属性\n    .map(entry => ({ // 对元素的属性进行默认处理\n      ...entry,\n      preventDefault: entry.preventDefault ?? true,\n      delay: entry.delay ?? delayToFocus,\n      type: entry.type === undefined ? [entry.key == null ? '' : \"keydown\", entry.node == null ? '' : \"click\"].filter(t => t != '') : [].concat(entry.type),\n      onExit: entry.onExit === true ? entry.on : entry.onExit, // 这个入口是开关吗\n    }))\n    .reduce(pickNodesAry, []); // 处理元素的 node 属性是数组的情况，将它分解成多个元素\n  /** 是否是空入口 */\n  const hasNoEntry = entries.length === 0;\n  /** 带切换的入口，如果 entry.onExit 有值，代表这个入口同时也是出口，也就是开关 */\n  const toggles = new Set(entries.map(e => isFun(e.onExit) ? e.node : null).filter(n => n != null).map(n => element(n)));\n  /** 默认入口，默认情况下，会从出口回到这个入口 */\n  let _trigger = element(trigger || entries[0]?.node);\n\n\n  const {\n    /** 封面节点 */\n    node: coverNode,\n    enterKey: coverEnterKey,\n    onEnter: onEnterCover,\n    exit: exitCover,\n  } = isObj(origin_cover) ? origin_cover : {};\n  /** 是否已经打开封面选项 */\n  const enabledCover = origin_cover != null && origin_cover !== false && coverNode !== false;\n  /** 封面即根元素 */\n  const coverIsRoot = enabledCover && (origin_cover === true || coverNode === true || coverNode == null);\n  /** 退出封面，封面的出口们 */\n  const exitsCover = [].concat(exitCover) // 转为数组\n    .filter(e => e != null) // 过滤空值\n    .map(e => isObj(e) ? e : { key: e }) // 元素转为对象，并且默认元素的值被看作对象的 key 属性\n    .map(e => ({ // 对元素的属性进行默认处理\n      ...e,\n      target: e.target ?? _trigger,\n    }));\n  /** 是否使用默认的离开封面方法，也即 tab 和 shift-tab */\n  const isDefaultExitCover = enabledCover && exitsCover.length === 0;\n\n\n  /** 列表 */\n  const list = new TabList();\n  /** 根元素 */\n  let root = null;\n  /** 封面 */\n  let cover = null;\n\n  list.recordPrev(null, initialActive ?? -1);\n\n  const {\n    key: isNext,\n    on: onNext,\n  } = isObj(next) ? next : { key: next };\n\n  const {\n    key: isPrev,\n    on: onPrev,\n  } = isObj(prev) ? prev : { key: prev };\n\n  /** 禁用左上角 esc 出口 */\n  const disabledEsc = onEscape === false;\n\n  /** 取消循环则设置头和尾焦点 */\n  const isClamp = !(loop ?? true);\n\n  /** 是否打开列表序列，按照序列的顺序进行焦点导航 */\n  const enabledTabSequence = !!(isNext || isPrev || sequence); // 自定义前进或后退焦点函数，则设置 sequence 为 true\n\n  /** 移动列表，是否阻止默认行为 */\n  const listPreventDefault = preventDefault ?? enabledTabSequence;\n\n  /** 进入了列表 */\n  let trappedList = false;\n  /** 进入了封面 */\n  let trappedCover = false;\n\n  /** 是否已添加监听事件 */\n  const listListeners = new ListenersCache();\n  /** 是否已添加入口的监听事件 */\n  const entryListeners = new ListenersCache();\n  /** 按键转发，监听事件 */\n  const keyForwards = new KeyForwardCache();\n\n  if (!manual) { // 如果不是手动添加事件，则注册入口、列表相关（封面、列表、出口）的事件\n    // 入口点击事件\n    addEntryListeners();\n\n    // 如果有入口不需要延迟，则立即加载列表的监听事件\n    const hasImmediateEntry = (hasNoEntry ? [{}] : entries).some(({ delay }) => !delay);\n\n    if (hasImmediateEntry) {\n\n      const {\n        root: newRoot, list: newList, cover: newCover,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(newList);\n      root = newRoot;\n      cover = newCover;\n\n      loadListRelatedListeners(root, list, cover);\n    }\n  }\n\n  const Return = {\n    /** 调用形式的入口 */\n    enter(entry) {\n      _trigger = _trigger || getActiveElement();\n\n      if (entry) {\n        const { on, target, delay } = entry;\n        return entryHandler({ fromInvoke: true }, on, target, delay);\n      } else {\n        for (let i = 0; i < entries.length; ++ i) {\n          const { on, type, node, target, delay } = entries[i];\n          const invokeType = \"invoke\";\n\n          if (type?.some(type => type == null || type === false || type === invokeType) || node == null) {\n            return entryHandler({ fromInvoke: true }, on, target, delay);\n          }\n        }\n        return entryHandler({ fromInvoke: true });\n      }\n    },\n    /** 调用形式的出口 */\n    exit(tempExit) {\n\n      const {\n        list: newList,\n        cover,\n        root,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n      if (tempExit) {\n        const { on, target: originTarget } = tempExit;\n        const target = element(originTarget);\n        return toExit(target, on);\n      } else {\n        const exits = getExits(exit, onEscape, enabledCover, cover, _trigger, delayToBlur);\n        for (let i = 0; i < exits.length; ++ i) {\n          const { on, type, target } = exits[i];\n          const invokeType = \"invoke\";\n  \n          if (type?.some(type => type == null || type === false || type === invokeType)) {\n            return toExit(target, on);\n          }\n        }\n      }\n\n      function toExit(target, on) {\n\n        if (list.isEmpty()) list.update(newList);\n\n        return exitHandler({ fromInvoke: true }, on, target, false, cover, list.data, root);\n      }\n    },\n    /** 移除所有的监听事件 */\n    removeListeners() {\n      listListeners.removeListeners();\n      entryListeners.removeListeners();\n    },\n    /** 移除列表相关的事件 */\n    removeListRelatedListeners() {\n      listListeners.removeListeners();\n    },\n    /** 移除入口事件 */\n    removeEntryListeners() {\n      entryListeners.removeListeners();\n    },\n    /** 添加入口的监听事件 */\n    addEntryListeners() {\n      addEntryListeners();\n    },\n    /** 添加列表相关（封面、列表、出口）的监听事件 */\n    addListRelatedListeners() {\n\n      const {\n        root,\n        list: newList,\n        cover,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      if (list.isEmpty()) list.update(newList);\n\n      loadListRelatedListeners(root, list, cover);\n    },\n    /** 添加转发 */\n    addForward(id, forward) {\n      let opts = null;\n      if (isFun(forward)) {\n        const {\n          root,\n          list: listData, head, tail,\n          cover,\n        } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n        opts = forward({ root, list: listData, head, tail, cover, curI: list.curI, prevI: list.prevI });\n      }\n      else opts = forward;\n\n      const { node: origin_node, on, key, target: origin_target } = opts;\n      const node = element(origin_node);\n      const target = element(origin_target);\n      keyForwards.push(id, node, e => {\n        if (key?.(e, list.prevI, list.curI)) {\n          e.preventDefault();\n          on?.();\n          tickFocus(target);\n        }\n      });\n    },\n    /** 移除转发 */\n    removeForward(id) {\n      keyForwards.remove(id);\n    },\n    /** 更新列表 */\n    updateList(newList) {\n      const _newList = newList.map(item => element(item)).filter(item => item != null);\n      list.update(_newList);\n    },\n    /** 当前聚焦的列表单项序号 */\n    i(newI) {\n      if (list.has(newI) && trappedList) {\n        list.recordSequenceByIdx(newI);\n        const { prev, prevI, cur, curI } = list;\n        onMove?.({ e: { fromI: true }, prev, prevI, cur, curI });\n        focus(subNodes[curI]);\n        return newI;\n      }\n      else return list.curI < 0 ? list.prevI : list.curI;\n    },\n  };\n\n  return Return;\n\n  /** 入口 handler */\n  function entryHandler(e, onEnter, target, delay, preventDefault, stopPropagation) {\n\n    // 如果已经在列表或者封面，则不再触发入口；出口不需要该操作，因为不存在从出口退出到出口的子元素的情况，相反，存在入口进入到入口子元素的情况。\n    if (trappedCover || trappedList) return;\n\n    preventDefault && e.preventDefault?.();\n    stopPropagation && e.stopPropagation?.();\n\n    Promise.resolve(onEnter?.(e)).then(_ => {\n      delayToProcess(delay, findNodesToLoadListenersAndFocus);\n    });\n\n    /** 寻找节点，加载事件监听器，聚焦 subNodes 或 coverNode */\n    function findNodesToLoadListenersAndFocus() {\n\n      if (list.isEmpty()) {\n        const { list: newList } = getListNodes(subNodes);\n        list.update(newList);\n      }\n\n      if (root == null)\n        root = getRootNode(rootNode, list.head, list.tail);\n\n      if (cover == null && enabledCover)\n        cover = getCoverNode(coverNode, coverIsRoot, root);\n\n      if (!manual)\n        loadListRelatedListeners(root, list, cover);\n      if (target !== false)\n        focusTarget(cover, list, root);\n    }\n    \n    function focusTarget(cover, listInfo, rootNode) {\n      const list = listInfo.data;\n      const { prev, head, curI } = listInfo;\n      const defaultTarget = prev || head;\n      const gotTarget = getTarget(target, cover, list, rootNode, enabledCover, curI, defaultTarget, e);\n      if (enabledTabSequence) { // 序列模式\n        const targetIdx = list.indexOf(gotTarget);\n        if (targetIdx > -1) {\n          listInfo.recordSequenceByIdx(targetIdx); // 只有在聚焦列表元素时才设置，否则会破坏原有 curI\n          const { cur, curI } = listInfo;\n          onMove?.({ e, prev: null, cur, prevI: -1, curI });\n          trappedList = true;\n        }\n      } else { // 范围模式\n        if (rootNode.contains(gotTarget) && gotTarget !== cover) {\n          listInfo.recordRange(gotTarget);\n          const { cur, curI } = listInfo;\n          onMove?.({ e, prev: null, cur, prevI: -1, curI });\n          trappedList = true;\n        }\n      }\n      if (enabledCover && (gotTarget === cover || trappedList === true)) trappedCover = true;\n      tickFocus(gotTarget);\n    }\n  }\n\n  /** 出口 handler */\n  function exitHandler(e, on, target, delay, cover, listData, root, ef, preventDefault, stopPropagation) {\n\n    if (!trappedList || \n      !(isFun(ef) ? ef({ e, prev: list.prev, cur: list.cur, prevI: list.prevI, curI: list.curI }) : true))\n      return false;\n\n    preventDefault && e.preventDefault?.(); // 阻止默认行为，例如 tab 到下一个元素，例如 entry button 触发 click 事件\n    stopPropagation && e.stopPropagation?.();\n\n    if (enabledTabSequence) list.recordSequenceByIdx(-1);\n    else list.recordRange(null);\n\n    trappedList = false;\n\n    const gotTarget = getTarget(target, cover, listData, root, enabledCover, list.curI, _trigger, e);\n\n    if (gotTarget) return exitListWithTarget();\n    else return exitListWithoutTarget();\n\n    /** 退出列表，有 target */\n    function exitListWithTarget() {\n\n      Promise.resolve(on?.(e)).then(_ => {\n        delayToProcess(delay, focusThenRemoveListeners);\n      });\n\n      function focusThenRemoveListeners() {\n        if (!manual) {\n          if (gotTarget !== cover)\n            removeListRelatedListeners();\n          if (addEntryListenersEachExit)\n            addEntryListeners();\n        }\n        onMove?.({ e, prev: list.prev, cur: null, prevI: list.prevI, curI: -1 });\n        focus(gotTarget);\n      }\n    }\n\n    /** 退出列表，无 target */\n    function exitListWithoutTarget() {\n\n      Promise.resolve(on?.(e)).then(_ => {\n\n        if (gotTarget === false) { // 如果显式设为 false，则直接退出，不聚焦，会在一个列表退出另一个列表移动的场景使用\n\n          const removeListenersWithoutFocus = focusThenRemoveListeners();\n          removeListenersWithoutFocus();\n          return ;\n        }\n\n        const focusTriggerThenRemoveListeners = focusThenRemoveListeners(_trigger);\n        delayToProcess(delay, focusTriggerThenRemoveListeners);\n      });\n\n      function focusThenRemoveListeners(focusTarget) {\n        return _ => {\n          if (!manual) {\n            removeListRelatedListeners();\n            if (addEntryListenersEachExit)\n              addEntryListeners();\n          }\n          onMove?.({ e, prev: list.prev, cur: null, prevI: list.prevI, curI: -1 });\n          focusTarget && focus(focusTarget);\n        }\n      }\n    }\n  }\n\n  /** 生成事件行为，添加事件监听器 */\n  function loadListRelatedListeners(root, listInfo, cover) {\n\n    const list = listInfo.data;\n    const head = listInfo.head;\n    const tail = listInfo.tail;\n\n    if (!listListeners.isEmpty) return ; // 列表的监听事件没有移除之前，不需要再次添加列表监听事件\n\n    if (root == null)\n      throw new Error(`没有找到元素 ${rootNode}，您可以尝试 delayToFocus 选项，等待元素 ${rootNode} 渲染完毕后进行聚焦。`);\n    if (head == null || tail == null)\n      throw new Error(\"至少需要包含两个可以聚焦的元素，如果元素需要等待渲染，您可以尝试 delayToFocus 选项。\");\n\n    // 添加除 trigger 以外其它和焦点相关的事件监听器\n    addListRelatedListeners();\n\n    /** 添加焦点需要的事件监听器 */\n    function addListRelatedListeners() {\n\n      /** 是否是来自默认封面出口的聚焦 */\n      let focusFromDefaultExitCover = false;\n\n      const useActiveIndex = () => [listInfo.curI, listInfo.recordSequenceByIdx.bind(listInfo)];\n\n      const isTrappedList = () => hasNoEntry ? true : trappedList;\n\n      // 在焦点循环中触发聚焦\n      const keyListMoveHandler = enabledTabSequence ? focusNextListItemBySequence : focusNextListItemByRange;\n\n      /** 出口们，列表的出口们，list 的出口们 */\n      const exits = getExits(exit, onEscape, enabledCover, cover, _trigger, delayToBlur);\n      const {\n        keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n        clickExits_wild, focusExits_wild,\n        outListExits,\n      } = splitExits(exits, root);\n\n      /** 非跟节点内的，是根节点之外的出口 */\n      const clickListExitHandlers_wild = clickExits_wild.map(exit => [element(exit?.node), clickListExitHandler_wild(exit)]);\n      const focusListExitHandlers_wild = focusExits_wild.map(exit => [element(exit?.node), focusListExitHandler_wild(exit)]);\n\n      listListeners.push(root, \"focusin\", focusTrapListHandler);\n\n      listListeners.push(root, \"focusout\", blurTrapListHandler);\n\n      if (!root.contains(cover) && cover != null) {\n\n        listListeners.push(cover, \"focus\", focusTrapCoverHandler);\n\n        listListeners.push(cover, \"blur\", blurTrapCoverHandler);\n      }\n\n      listListeners.push(root, \"keydown\", e => {\n        let exited = false;\n        // 列表键盘出口\n        if (hasKeyExits)\n          exited = keyListExitHandler(e);\n        // 列表中移动，监听移动的键盘事件，例如 tab 或其它自定义组合键\n        if (!exited) // 退出的优先级高于列表移动\n          keyListMoveHandler(e);\n      });\n\n      listListeners.push(root, \"click\", e => {\n        // 点击聚焦列表单项，只在手动列表时监听点击，因为自动模式不需要记录 list.curI\n        clickListItemHandler(e);\n        // 列表点击出口\n        hasClickExits && clickListExitHandler(e);\n      });\n\n      // 由于 click 事件在 focus 之后，这里用来判断是否通过点击进入列表，用于纠错未知进入列表的焦点定位\n      listListeners.push(root, \"mousedown\", mousedownListItemHandler);\n\n      if (hasFocusExits) {\n        // 列表聚焦出口\n        listListeners.push(root, \"focusin\", focusListExitHandler);\n      }\n\n      // 非列表内的出口\n      focusListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"focus\", handler);\n      });\n      clickListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"click\", handler);\n      });\n\n      if (cover != null) {\n        // 封面的事件\n        listListeners.push(cover, \"keydown\", keyCoverHandler);\n      }\n\n      // flush\n      listListeners.addListeners();\n\n\n\n      let isMouseDown = false;\n      /** 标记是否从封面进入列表，用于防止纠正列表焦点的误判，用于野生封面 */\n      let isEnterFromCover = false;\n\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n       |          LIST HANDLERS          |\n       +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function focusTrapListHandler(e) {\n\n        /** 当前焦点 */\n        const target = e.target;\n        /** 前一个焦点 */\n        const relatedTarget = e.relatedTarget;\n\n        // 默认封面退出\n        if (focusFromDefaultExitCover) {\n          focusFromDefaultExitCover = false;\n          return;\n        }\n\n        // 进入封面（封面在列表中）\n        if (enabledCover && target === cover) { // TODO: 保留确认，或是否需要添加 `&& trappedList` 条件\n          trappedCover = true;\n          return ;\n        }\n\n        // 纠正进入封面，从外部进入列表，如果没有通过封面，则重新聚焦封面\n        if (enabledCover && isMouseDown === false && trappedCover === false) {\n          tickFocus(cover);\n          return ;\n        }\n\n        // 调用范围模式下的 onPrev、onNext、onMove，此时焦点正在列表内移动\n        if (listInfo.rangeBeforePrevCallback || listInfo.rangeBeforeNextCallback) {\n          listInfo.recordRange(target);\n          listInfo.rangeBeforePrevCallback = false;\n          listInfo.rangeBeforeNextCallback = false;\n          const { cur, prev } = listInfo;\n          (listInfo.rangeBeforePrevCallback ? onNext : onPrev)?.({ e, prev, cur, prevI: -1, curI: -1 });\n          onMove?.({ e, prev, cur, prevI: -1, curI: -1 });\n          return ;\n        }\n\n        // 纠正外部聚焦进来的焦点。如果是内部的聚焦，无需纠正，防止嵌套情况的循环问题\n        if (correctionTarget !== false &&\n          trappedList === false &&\n          isMouseDown === false &&\n          (relatedTarget == null || // 上一个焦点为空\n            !root.contains(relatedTarget))) // 上一个焦点在根节点 root 以外的区域\n        {\n          const defaultLast = listInfo.prev || listInfo.head;\n          const originGotCorrectionTarget = correctionTarget?.({ list, cover, root, last: listInfo.prev, lastI: listInfo.prevI, e }) ?? defaultLast;\n          const gotCorrectionTarget = element(originGotCorrectionTarget);\n\n          onMoveTargetFromOuter(gotCorrectionTarget);\n          tickFocus(gotCorrectionTarget);\n        }\n\n        // 关闭焦点纠正，同时从外部进来了焦点\n        if (correctionTarget === false &&\n          trappedList === false &&\n          isMouseDown === false &&\n          (relatedTarget == null || !root.contains(relatedTarget)))\n          onMoveTargetFromOuter(target)\n\n        /** 矫正时的 onMove 调用 */\n        function onMoveTargetFromOuter(target) {\n          if (enabledTabSequence) { // 序列模式\n            const targetIndex = list.findIndex(item => item === target);\n            if (targetIndex > -1) {\n              listInfo.recordSequenceByIdx(targetIndex);\n              onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n              trappedList = true; // 在下一次 触发 focusin 调用 focusTrapListHandler 之前，设为 true。通过 api 调用的 focus，触发的 focusin 事件会被“同步”调用\n            }\n          } else { // 范围模式\n            listInfo.recordRange(target);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n            trappedList = true; // 在下一次 触发 focusin 调用 focusTrapListHandler 之前，设为 true。通过 api 调用的 focus，触发的 focusin 事件会被“同步”调用\n          }\n        }\n      }\n\n      function blurTrapListHandler(e) {\n        // 用于保护可切换的入口（开关，同时作为出口的入口）能够被触发\n        if (toggles.has(e.relatedTarget)) return;\n\n        tick(() => { // 延迟后获取下一次聚焦的元素，否则当前聚焦元素是 body\n\n          const active = getActiveElement();\n          const isOutRootNode = !root.contains(active);\n          const isActiveCover = active === cover;\n\n          // 从封面退出\n          if (e.target === cover && isOutRootNode) {\n            trappedCover = false; // 退出封面\n            return;\n          }\n\n          let isOutList = null;\n          if (isActiveCover || isOutRootNode) {\n            isOutList = outListExitHandler(e);\n            if (enabledTabSequence) listInfo.recordSequenceByIdx(-1);\n            else listInfo.recordRange(null);\n          }\n          if (isOutList === false) return; // 不符合 outlist 退出列表的条件\n\n          if (isActiveCover) { // 聚焦在封面\n            trappedList = false;\n          } else if (isOutRootNode) { // 聚焦在非封面、非列表的区域\n            trappedList = false;\n            trappedCover = false;\n          }\n        });\n      }\n\n      function mousedownListItemHandler(e) {\n        isMouseDown = true;\n        tick(() => isMouseDown = false); // mousedown 没有出口，只能使用定时器，isMouseDown 主要在两个 focus 事件中使用，当触发 focus 时，此定时器还未执行，以此保证正确性\n\n        let targetItem;\n        if (!enabledTabSequence || // 未打开 sequence 属性 或者\n          (enabledTabSequence && // 已打开 sequence 属性 并且\n            (targetItem = list.find(item => item.contains(e.target))) // 点击的目标是列表中的元素\n          )\n        ) {\n          trappedList = true;\n          if (enabledCover) trappedCover = true;\n          // 兼容 Safari（桌面端），具体问题查看：https://github.com/wswmsword/web-experiences/tree/main/browser/safari-button-focus\n          if (allowSafariToFocusAfterMousedown && targetItem && window.safari !== undefined) {\n            focus(targetItem); // Safari 不会聚焦按钮元素，这里强制使用 api 聚焦\n            e.preventDefault(); // 阻止默认行为可以避免 targetItem 失焦\n          }\n        }\n      }\n\n      /** 点击聚焦列表某一单项 */\n      function clickListItemHandler(e) {\n\n        const target = e.target;\n\n        if (enabledTabSequence) { // 序列模式\n\n          const targetIndex = list.findIndex(item => item.contains(target));\n          if (targetIndex > -1) {\n            const { prev: prevBeforeRecord, prevI: prevIBeforeRecord, curI: curIBeforeRecord } = listInfo;\n            listInfo.recordSequenceByIdx(targetIndex);\n  \n            let { prev, prevI, cur, curI } = listInfo;\n            if (curIBeforeRecord < 0) { // 从外部进入\n              if (prevIBeforeRecord !== targetIndex) { // 上一次进入 和 本次进入 的元素不同\n                prev = prevBeforeRecord;\n                prevI = prevIBeforeRecord;\n              }\n            }\n  \n            onClick?.({ e, prev, cur, prevI, curI });\n            if (curIBeforeRecord !== curI) // 从外部进入 或者 列表内的移动\n              onMove?.({ e, prev, cur, prevI, curI });\n          }\n        } else { // 范围模式\n\n          const { prev: prevBeforeRecord, cur: curBeforeRecord } = listInfo;\n          listInfo.recordRange(target);\n\n          let { prev, cur } = listInfo;\n          if (curBeforeRecord == null) { // 外部进入\n            if (prevBeforeRecord !== target) {\n              prev = prevBeforeRecord;\n            }\n          }\n\n          onClick?.({ e, prev, cur, prevI: -1, curI: -1 });\n          if (curBeforeRecord !== cur) // 从外部进入 或者 列表内的移动\n            onMove?.({ e, prev, cur, prevI: -1, curI: -1 });\n        }\n      }\n\n      /** 手动聚焦下一个元素 */\n      function focusNextListItemBySequence(e) {\n        if (e.target === cover) return;\n        if (!isTrappedList()) return;\n\n        const [index_, setIndex] = useActiveIndex();\n        const index = Math.max(0, index_);\n        const itemsLen = list.length;\n        let focused = false;\n        if ((isNext ?? isTabForward)(e)) {\n          const incresedI = index + 1;\n          let nextI = isClamp ? Math.min(itemsLen - 1, incresedI) : incresedI;\n          nextI %= itemsLen;\n          onNext?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          onMove?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          setIndex(nextI);\n          focus(list[nextI]);\n          focused = true;\n        }\n        else if ((isPrev ?? isTabBackward)(e)) {\n          const decresedI = index - 1;\n          let nextI = isClamp ? Math.max(0, decresedI) : decresedI;\n          nextI = (nextI + itemsLen) % itemsLen;\n          onPrev?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          onMove?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          setIndex(nextI);\n          focus(list[nextI]);\n          focused = true;\n        }\n\n        if (focused) {\n          listPreventDefault && e.preventDefault();\n          listStopPropagation && e.stopPropagation();\n        }\n      };\n\n      /** 按下 tab，以浏览器的行为聚焦下个元素 */\n      function focusNextListItemByRange(e) {\n        const head = list[0];\n        const tail = list.at(-1);\n        const current = e.target;\n        if (current === cover) return;\n        if (!isTrappedList()) return;\n\n        let needToPreventDefault = false;\n        let focused = false;\n        if (isTabForward(e)) {\n          listInfo.recordRange(current);\n          listInfo.rangeBeforeNextCallback = true;\n          if (current === tail) {\n            needToPreventDefault = true;\n            if (!isClamp) focus(head);\n          }\n          if (current === root) {\n            needToPreventDefault = true;\n            focus(head);\n          }\n          focused = true;\n        }\n        else if (isTabBackward(e)) {\n          listInfo.recordRange(current);\n          listInfo.rangeBeforePrevCallback = true;\n          if (current === head) {\n            needToPreventDefault = true;\n            if (!isClamp) focus(tail);\n          }\n          if (current === root) {\n            needToPreventDefault = true;\n            focus(tail);\n          }\n          focused = true;\n        }\n\n        if (needToPreventDefault || (focused && listPreventDefault)) e.preventDefault();\n        if (focused && listStopPropagation) e.stopPropagation();\n      };\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |         COVER HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function focusTrapCoverHandler() { trappedCover = true; } // 捕获点击封面的情况\n\n      function blurTrapCoverHandler() { // 捕获点击空白区域的情况\n        if (isEnterFromCover) // 用于防止纠正列表焦点的误判，如果是进入列表，则 trappedCover 还应是 true\n          isEnterFromCover = false;\n        else\n          trappedCover = false;\n      }\n\n      /** 封面的键盘事件响应 */\n      function keyCoverHandler(e) {\n        if (e.target !== cover) return;\n        if (!(trappedCover && !trappedList)) return; // 继续执行，必须满足焦点在封面上，且不在列表中\n\n        // 入口（封面），从封面进入列表\n        if((coverEnterKey ?? isEnterEvent)(e) && !trappedList) {\n          e.preventDefault();\n          isEnterFromCover = true;\n          trappedList = true;\n          onEnterCover?.(e);\n          if (enabledTabSequence) {\n            listInfo.recordSequenceByIdx(Math.max(0, listInfo.prevI));\n            focus(listInfo.cur);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n          } else {\n            listInfo.recordRange(listInfo.prev == null ? listInfo.head : listInfo.prev);\n            focus(listInfo.cur);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: -1 });\n          }\n          return;\n        }\n\n        // 出口（封面），从封面回到入口\n        for (let i = 0; i < exitsCover.length; ++ i) {\n          const { key, on, target: origin } = exitsCover[i];\n          const target = element(origin);\n          if (key?.(e, listInfo.prevI, listInfo.curI)) {\n            exitCoverHandler(e, on, target);\n            return;\n          }\n        }\n\n        // 默认出口，默认行为，默认的行为的场景是包含子元素的长列表\n        if (isDefaultExitCover &&\n          isTabForward(e)) { // 虽然也是离开列表，但是这里不移除监听事件，因为移除后就不能再次进入封面\n          focusFromDefaultExitCover = true;\n          focus(tail);\n          return;\n        }\n\n        /** 退出封面焦点的行为 */\n        function exitCoverHandler(e, onExit, target) {\n          onExit?.(e);\n          target && focus(target);\n          removeListRelatedListeners();\n        }\n      }\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |            + START +            |\n      |          EXIT HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function outListExitHandler(e) {\n        for (let i = 0; i < outListExits.length; ++ i) {\n          const { on, target: origin_target, delay, preventDefault, stopPropagation } = outListExits[i];\n          const target = element(origin_target);\n          return exitHandler(e, on, target, delay, cover, list, root, outListExits[i].if, preventDefault, stopPropagation);\n        }\n      }\n\n      function exitHandlerWithCondition(e, exit, condition) {\n        const { node: origin_node, on, target: origin_target, delay, preventDefault, stopPropagation } = exit;\n        const { data: list, head, tail } = listInfo;\n        const stringOrNode = isFun(origin_node) ? origin_node({ list, head, tail }) : origin_node;\n        const node = element(stringOrNode);\n        const target = element(origin_target);\n\n        if (condition(e, node, exit.key)) // 未设置点击目标\n          return false;\n        const res = exitHandler(e, on, target, delay, cover, list, root, exit.if, preventDefault, stopPropagation);\n        return res !== false;\n      }\n\n      function clickExitHandler(e, exit) {\n\n        const cantClick = (e, node) => (node != null && !node.contains(e.target)) || node == null; // 点击目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantClick);\n      }\n\n      /** 点击列表的出口 */\n      function clickListExitHandler(e) {\n        for (let i = 0; i < clickExits.length; ++ i) {\n          const isOK = clickExitHandler(e, clickExits[i]);\n          if (isOK) break; // 只生效第一个满足条件的出口\n        }\n      }\n\n      function focusExitHandler(e, exit) {\n\n        const cantFocus = (e, node) => (node != null && e.target !== node) || node == null; // 聚焦目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantFocus);\n      }\n\n      /** 聚焦列表一个单项而退出 */\n      function focusListExitHandler(e) {\n\n        for (let i = 0; i < focusExits.length; ++ i) {\n          const isOK = focusExitHandler(e, focusExits[i])\n          if (isOK) break;\n        }\n      }\n\n      function keyExitHandler(e, exit) {\n\n        const cantKey = (e, node, key) => (node != null && e.target !== node) || (!key?.(e, listInfo.prevI, listInfo.curI)); // 聚焦目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantKey);\n      }\n\n      /** 触发键盘退出列表，退出列表焦点 */\n      function keyListExitHandler(e) {\n        if (e.target === cover) return; // 被封面触发直接返回\n\n        if (disabledEsc && isEscapeEvent(e)) return;\n\n        for (let i = 0; i < keyExits.length; ++ i) {\n          const isOK = keyExitHandler(e, keyExits[i]);\n          if (isOK) return true;\n        }\n      }\n\n      function clickListExitHandler_wild(exit) {\n        return function(e) { clickExitHandler(e, exit); }\n      }\n\n      function focusListExitHandler_wild(exit) {\n        return function(e) { focusExitHandler(e, exit); }\n      }\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |             - END -             |\n      |          EXIT HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n    };\n  }\n\n  /** 添加入口事件 */\n  function addEntryListeners() {\n\n    if (!entryListeners.isEmpty) return;\n\n    for (let i = 0; i < entries.length; ++ i) {\n      const entry = entries[i];\n      const { node: origin, on, key, type, target, delay, onExit, preventDefault, stopPropagation } = entry;\n      const ef = entry.if;\n      const types = [].concat(type);\n      const allTypes = [\"keydown\", \"focus\", \"click\"];\n      const node = element(origin);\n\n      types.forEach(type => {\n        if (node && allTypes.includes(type)) {\n\n          /** 是否是键盘事件 */\n          const isKey = type === \"keydown\";\n          /** 如果是键盘事件，则判断键位是否匹配，如果是非键盘事件，则直接返回 true */\n          const ifKey = isKey ? e => key?.(e, list.prevI, list.curI) : _ => true;\n          entryListeners.push(node, type, toggleHandler(ifKey)); // 保存事件信息\n        }\n      });\n      \n      function toggleHandler(ifKey) {\n        return e => {\n          if (\n            (isFun(ef)\n              ? ef({ e, prev: list.prev, cur: list.cur, prevI: list.prevI, curI: list.curI })\n              : true) &&\n            ifKey(e))\n            toggleEntryAndExit(e);\n        }\n      }\n\n      function toggleEntryAndExit(e) {\n\n        if (trappedList) {\n          if (isFun(onExit)) { // 若存在 onExit，则表示该入口同时是出口，是开关\n            const { list, cover, root } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n            exitHandler(e, onExit, target, false, cover, list, root, null, preventDefault, stopPropagation);\n          }\n        }\n        else {\n          entryHandler(e, on, target, delay, preventDefault, stopPropagation);\n          if (removeListenersEachEnter && !manual)\n            entryListeners.removeListeners();\n        }\n      }\n    }\n\n    // flush\n    entryListeners.addListeners();\n  }\n\n  /** 移除监听事件 */\n  function removeListRelatedListeners() {\n\n    // 如果是默认的，没有定义出口的封面，则不移除事件\n    if (isDefaultExitCover) return;\n\n    if (removeListenersEachExit && !manual) {\n      listListeners.removeListeners();\n    }\n  }\n};\n\nexport default focusFly;"],"names":["objToStr","obj","Object","prototype","toString","call","isObj","isFun","fun","getActiveElement","document","activeElement","element","e","str","querySelector","tick","fn","setTimeout","isEnterEvent","key","keyCode","isEscapeEvent","isTabEvent","isTabForward","shiftKey","isTabBackward","focus","node","tagName","toLowerCase","select","tickFocus","getRootNode","rootStr","listHead","listTail","_element","x","y","contains","range","Range","setStartBefore","setEndAfter","collapsed","commonAncestorContainer","findLowestCommonAncestorNode","getListNodes","listAry","list","map","item","filter","head","tail","slice","getCoverNode","coverStr","coverIsRoot","root","getKeyNodes","originRoot","originList","originCover","_getListNodes","cover","pickNodesAry","acc","cur","nodes","Array","isArray","n","_extends","concat","splitExits","exits","_exits$reduce","reduce","click","click_wild","focus_wild","outList","includeType","type","_e$type","includes","fill","keyExits","clickExits","focusExits","clickExits_wild","focusExits_wild","outListExits","hasClickExits","length","hasFocusExits","hasKeyExits","getExits","exit","onEscape","enabledCover","trigger","delayToBlur","_tempExits$0$on","_tempExits$","tempExits","o","ele","_e$preventDefault","_e$delay","preventDefault","delay","undefined","t","_onEscape","on","target","delayToProcess","processor","_getDelayType","isFunctionDelay","delayRes","promiseDelay","then","callbackDelay","commonDelay","getDelayType","getTarget","activeIndex","defaultTarget","gotTarget","last","lastI","ListenersCache","this","cache","isEmpty","_proto","push","handler","clean","addListeners","forEach","l","_l$node","addEventListener","removeListeners","_l$node2","removeEventListener","KeyForwardCache","Map","_proto2","has","id","set","remove","_this","get","TabList","data","prevI","curI","_prev","_cur","rangeBeforePrevCallback","rangeBeforeNextCallback","_proto3","update","splice","apply","at","i","record","recordPrev","recordCur","recordSequnce","recordRange","prev","recordSequenceByIdx","v","_ref","_entries$","offset","arguments","rootNode","subNodes","options","Error","sequence","loop","next","entry","onClick","onMove","origin_cover","initialActive","correctionTarget","delayToFocus","_options$removeListen","removeListenersEachExit","removeListenersEachEnter","_options$addEntryList","addEntryListenersEachExit","_options$stopPropagat","stopPropagation","listStopPropagation","manual","_options$allowSafariT","allowSafariToFocusAfterMousedown","entries","_entry$preventDefault","_entry$delay","onExit","hasNoEntry","toggles","Set","_trigger","_ref2","coverNode","coverEnterKey","enterKey","onEnterCover","onEnter","exitCover","exitsCover","_e$target","isDefaultExitCover","_ref3","isNext","onNext","_ref4","isPrev","onPrev","disabledEsc","isClamp","enabledTabSequence","listPreventDefault","trappedList","trappedCover","listListeners","entryListeners","keyForwards","addEntryListeners","some","_ref5","_getKeyNodes","newRoot","newList","newCover","loadListRelatedListeners","Return","enter","entryHandler","fromInvoke","_loop","_entries$i","_ret","tempExit","_getKeyNodes2","originTarget","toExit","_loop2","_exits$i","_ret2","exitHandler","removeListRelatedListeners","removeEntryListeners","addListRelatedListeners","_getKeyNodes3","addForward","forward","opts","_getKeyNodes4","_opts","origin_node","origin_target","removeForward","updateList","_newList","newI","fromI","_e$preventDefault2","_e$stopPropagation","findNodesToLoadListenersAndFocus","listInfo","targetIdx","indexOf","focusTarget","Promise","resolve","_","listData","ef","_e$preventDefault3","_e$stopPropagation2","focusThenRemoveListeners","exitListWithTarget","focusTriggerThenRemoveListeners","removeListenersWithoutFocus","exitListWithoutTarget","focusFromDefaultExitCover","isTrappedList","keyListMoveHandler","_useActiveIndex","bind","index_","setIndex","index","Math","max","itemsLen","focused","incresedI","nextI","min","decresedI","current","needToPreventDefault","_splitExits","clickListExitHandlers_wild","clickListExitHandler_wild","focusListExitHandlers_wild","focusListExitHandler_wild","relatedTarget","isMouseDown","_ref8","_correctionTarget","defaultLast","originGotCorrectionTarget","gotCorrectionTarget","onMoveTargetFromOuter","targetIndex","findIndex","active","isOutRootNode","isActiveCover","isOutList","outListExitHandler","isEnterFromCover","exited","keyExitHandler","keyListExitHandler","prevBeforeRecord","prevIBeforeRecord","curIBeforeRecord","curBeforeRecord","clickListItemHandler","clickExitHandler","clickListExitHandler","targetItem","find","window","safari","focusExitHandler","_ref6","_ref7","_exitsCover$i","origin","exitCoverHandler","_outListExits$i","exitHandlerWithCondition","condition","stringOrNode","_loop3","types","allTypes","ifKey","_getKeyNodes5","toggleEntryAndExit","toggleHandler"],"mappings":"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"}