{"version":3,"file":"focus-fly.umd.js","sources":["../utils.js","../index.js"],"sourcesContent":["/** Object.prototype.toString.call 快捷方式 */\nexport const objToStr = obj => Object.prototype.toString.call(obj);\n\n/** 参数是否是对象 */\nexport const isObj = obj => objToStr(obj) === \"[object Object]\";\n\n/** 是否为函数 */\nexport const isFun = fun => objToStr(fun) === \"[object Function]\";\n\n/** document.activeElement 的快捷方式 */\nexport const getActiveElement = () => document.activeElement;\n\n/** document.querySelector 的快捷方式 */\nexport const querySelector = str => document.querySelector(str);\n\n/** 通过字符串查找节点，或者直接返回节点 */\nexport const element = e => typeof e === \"string\" ? querySelector(e) : e;\n\n/** 滴答 */\nexport const tick = function(fn) {\n  setTimeout(fn, 0);\n};\n\n/** 是否是 input 可 select 的元素 */\nexport const isSelectableInput = function(node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\n/** 是否按下了 enter */\nexport const isEnterEvent = function(e) {\n  return e.key === \"Enter\" || e.keyCode === 13;\n};\n\n/** 按键是否是 esc */\nexport const isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\n/** 按键是否是 tab */\nexport const isTabEvent = function(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n/** 是否是向前的 tab */\nexport const isTabForward = function(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n/** 是否是向后的 tab */\nexport const isTabBackward = function(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\n/** 找到两个元素的最小公共祖先元素 */\nexport const findLowestCommonAncestorNode = function(x, y) {\n  if (x == null || y == null) return null;\n  if (x.contains(y)) return x;\n  if (y.contains(x)) return y;\n\n  const range = new Range();\n  range.setStartBefore(x);\n  range.setEndAfter(y);\n  if (range.collapsed) {\n     range.setStartBefore(y);\n     range.setEndAfter(x);\n  }\n  return range.commonAncestorContainer;\n};","import { objToStr, isObj, isFun, getActiveElement, element, tick, isSelectableInput, isEnterEvent, isEscapeEvent, isTabForward, isTabBackward, findLowestCommonAncestorNode } from \"./utils\";\n\n/** 聚焦，如果是 input，则聚焦后选中 */\nconst focus = function(e) {\n  e.focus();\n  if (isSelectableInput(e))\n    e.select();\n};\n\n/** 尝试聚焦，如果聚焦失效，则下个 setTimeout 再次聚焦 */\nconst tickFocus = function(e) {\n  if (e == null) tick(() => e && focus(e));\n  else focus(e);\n};\n\n/** 获取根节点 */\nconst getRootNode = function(rootStr, listHead, listTail) {\n  return element(rootStr) ?? findLowestCommonAncestorNode(listHead, listTail);\n};\n\n/** 获取列表节点 */\nconst getListNodes = function(listAry) {\n  const list = listAry.map(item => element(item)).filter(item => item != null);\n  const head = list[0];\n  const tail = list.slice(-1)[0];\n  return { list, head, tail };\n}\n\n/** 获取封面节点 */\nconst getCoverNode = function(coverStr, coverIsRoot, root) {\n  return coverIsRoot ? root : element(coverStr);\n}\n\n/** 获取关键节点 */\nconst getKeyNodes = function(originRoot, originList, originCover, coverIsRoot) {\n  const { list, head, tail } = getListNodes(originList);\n  const root = getRootNode(originRoot, head, tail);\n  const cover = getCoverNode(originCover, coverIsRoot, root);\n\n  return {\n    root,\n    list, head, tail,\n    cover,\n  };\n};\n\n/** 用于处理节点属性可以传递数组的情况，用于入口和出口 */\nconst pickNodesAry = function(acc, cur) {\n  const isAryNodes = Array.isArray(cur.node);\n  const nodes = isAryNodes ? cur.node.map(n => ({\n    ...cur,\n    node: n,\n  })) : cur;\n  return acc.concat(nodes);\n};\n\n/** 获取分割的出口 */\nconst splitExits = function(exits, root) {\n  /** 生效的节点是否在根元素内部（列表中） */\n  const isInnerRoot = node => isFun(node) || (node != null && root.contains(element(node))) || node == null;\n\n  const [keyExits, clickExits, focusExits, clickExits_wild, focusExits_wild, outListExits] = exits.reduce((acc, e) => {\n    let [key, click, focus, click_wild, focus_wild, outList] = acc;\n    const includeType = type => e.type?.includes(type);\n    if (isInnerRoot(e.node)) {\n      if (includeType(\"keydown\")) key = key.concat(e);\n      if (includeType(\"click\")) click = click.concat(e);\n      if (includeType(\"focus\")) focus = focus.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    } else {\n      if (includeType(\"click\")) click_wild = click_wild.concat(e);\n      if (includeType(\"focus\")) focus_wild = focus_wild.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    }\n    return [key, click, focus, click_wild, focus_wild, outList];\n  }, new Array(6).fill([]));\n\n  const hasClickExits = clickExits.length > 0;\n  const hasFocusExits = focusExits.length > 0;\n  const hasKeyExits = keyExits.length > 0;\n  \n  return {\n    keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n    clickExits_wild, focusExits_wild,\n    outListExits,\n  };\n}\n\n/** 获取（生成）出口 */\nconst getExits = function(exit, onEscape, enabledCover, cover, trigger, delayToBlur) {\n\n  let tempExits = [].concat(exit).filter(o => o != null)\n    .map(ele => isObj(ele) ? ele : { node: ele })\n    .map(e => ({\n      ...e,\n      preventDefault: e.preventDefault ?? true,\n      delay: e.delay ?? delayToBlur,\n      // undefined 表示用户没有主动设置\n      type: e.type === undefined ? [e.key == null ? '' : \"keydown\", e.node == null ? '' : \"click\"].filter(t => t !== '') : [].concat(e.type),\n    }))\n    .reduce(pickNodesAry, []);\n  let _onEscape = isFun(onEscape) ? onEscape : onEscape === true ? tempExits[0]?.on ?? (() => {}) : onEscape;\n  /** 按下 esc 的出口 */\n  const escapeExit = isFun(_onEscape) ? {\n    node: null,\n    key: isEscapeEvent,\n    on: _onEscape,\n    target: enabledCover ? cover : trigger,\n    type: [\"keydown\"],\n  } : null;\n  const exits = [escapeExit].concat(tempExits).filter(e => e != null);\n\n  return exits;\n};\n\n/** 延迟执行某些操作 */\nconst delayToProcess = function(delay, processor) {\n\n  const { promiseDelay, callbackDelay, commonDelay, delayRes } = getDelayType();\n  if (promiseDelay) delayRes.then(processor);\n  else if (callbackDelay) {} // 已执行完毕\n  else if (commonDelay) processor();\n\n  /** 获取聚焦或失焦时延迟的类型 */\n  function getDelayType() {\n\n    const isFunctionDelay = isFun(delay);\n    const delayRes = isFunctionDelay && delay(processor);\n    const promiseDelay = isFunctionDelay && objToStr(delayRes) === \"[object Promise]\" && typeof delayRes.then === \"function\";\n    const callbackDelay = isFunctionDelay && !promiseDelay;\n    const commonDelay = !promiseDelay && !callbackDelay; // 立即执行\n    return {\n      promiseDelay,\n      callbackDelay,\n      commonDelay,\n      delayRes,\n    };\n  }\n};\n\n/** 获取出口或者入口的目标 */\nconst getTarget = function(target, cover, list, root, enabledCover, activeIndex, defaultTarget, e) {\n  // 空 target 走默认\n  if (target == null || target === true) {\n    if (enabledCover) return cover;\n    else return defaultTarget;\n  }\n  // 函数 target 则传入节点执行\n  else if (isFun(target)) {\n    const gotTarget = target({ e, list, cover, root, last: list[activeIndex], lastI: activeIndex });\n    if (gotTarget == null || gotTarget === true) {\n      if (enabledCover) return cover;\n      else return defaultTarget;\n    }\n    return gotTarget;\n  }\n  // 选择器字符串或者节点，则直接获取\n  else return element(target);\n};\n\n/** 保存的监听事件信息，方便监听和移除监听 */\nclass ListenersCache {\n  cache = [];\n  isEmpty = true;\n  push(node, type, handler) {\n    this.isEmpty = false;\n    this.cache.push({\n      node,\n      type,\n      handler,\n    });\n  }\n  clean() {\n    this.cache = [];\n    this.isEmpty = true;\n  }\n  addListeners() {\n    this.cache.forEach(l => l.node?.addEventListener(l.type, l.handler));\n  }\n  removeListeners() {\n    this.cache.forEach(l => l.node?.removeEventListener(l.type, l.handler));\n    this.clean();\n  }\n}\n\n/** 按键转发的缓存 */\nclass KeyForwardCache {\n  cache = new Map();\n  has(id) {\n    return this.cache.has(id);\n  }\n  push(id, node, handler) {\n    if (this.has(id)) return;\n    node.addEventListener(\"keydown\", handler);\n    this.cache.set(id, {\n      node,\n      handler,\n    })\n  }\n  remove(id) {\n    const ids = [].concat(id);\n    ids.forEach(id => this.cache.get(id).node.removeEventListener(\"keydown\", this.cache.get(id).handler));\n  }\n}\n\n/** 保存列表数据 */\nclass TabList {\n  data = [];\n  head = null;\n  tail = null;\n  prevI = -1;\n  curI = -1;\n  _prev = null;\n  _cur = null;\n  rangeBeforePrevCallback = false; // 范围模式下，当前是否在调用钩子回调（onMove、onPrev）之前\n  rangeBeforeNextCallback = false; // 范围模式下，当前是否在调用钩子回调（onMove、onNext）之前\n  get prev() {\n    return this._prev || this.data[this.prevI] || null; // _prev 可能由于 dom 未加载而为 null，为 null 则通过 prevI 取值\n  };\n  get cur() {\n    return this._cur || this.data[this.curI] || null;\n  };\n  set prev(v) {\n    this._prev = v;\n  };\n  set cur(v) {\n    this._cur = v;\n  };\n  update(list) {\n    this.data.splice(0, this.data.length);\n    Array.prototype.push.apply(this.data, list);\n    this.head = list[0];\n    this.tail = list.at(-1);\n  };\n  isEmpty() {\n    return this.data.length === 0;\n  };\n  has(i) {\n    return !!this.data[i];\n  };\n  record(cur, curI) {\n    this.recordPrev(this.cur, this.curI);\n    this.recordCur(cur, curI);\n  };\n  recordSequnce(cur, curI) {\n    if (this.curI === curI // this.curI 和 curI 必须不同\n      || (this.curI < 0 && curI < 0)) // curI 为 -1 后，不会再次更新新的 -1\n      return;\n    this.record(cur, curI);\n  };\n  recordRange(cur) {\n    if (this.cur === cur || (this.cur == null && cur == null))\n      return;\n    this.record(cur, -1);\n  };\n  recordPrev(prev, prevI) {\n    this.prevI = prevI < 0 ? -1 : prevI;\n    this.prev = prev || null;\n  };\n  recordCur(cur, curI) {\n    this.curI = curI < 0 ? -1 : curI;\n    this.cur = cur || null;\n  };\n  recordSequenceByIdx(curI) {\n    this.recordSequnce(this.data[curI], curI);\n  };\n}\n\nconst focusFly = (...props) => {\n  const offset = 0 - (props[0] instanceof Array);\n  const rootNode = props[0 + offset];\n  const subNodes = props[1 + offset];\n  const options  = props[2 + offset] ?? {};\n\n  if (!(Array.isArray(subNodes) && subNodes.length > 1))\n    throw new Error(\"请至少传入一个数组，数组至少包含两个可聚焦元素，用来表示列表的头和尾。\");\n\n  const {\n    /** move: tab 序列，指定可以聚焦的元素，聚焦 list 内的元素 */\n    sequence,\n    /** move: 是否循环，设置后，尾元素的下个焦点是头元素，头元素的上个焦点是尾元素 */\n    loop,\n    /** move: 自定义前进焦点函数 */\n    next,\n    /** move: 自定义后退焦点函数 */\n    prev,\n    /** focus/blur: 触发器，如果使用 focusFly.enter 则不用设置，如果使用 entry.selector 则不用设置 */\n    trigger,\n    /** focus: 触发触发器的配置 */\n    entry,\n    /** blur: 触发退出触发器的配置 */\n    exit,\n    /** blur: 按下 esc 的行为，如果未设置，则取 exit.on */\n    onEscape,\n    /** 点击列表单项的响应，行为 */\n    onClick,\n    /** 移动的时候触发 */\n    onMove,\n    /** cover: 封面，默认情况，触发入口后首先聚焦封面，而不是子元素 */\n    cover: origin_cover,\n    /** 初始的列表中聚焦元素的序号 */\n    initialActive,\n    /** 矫正列表的焦点 */\n    correctionTarget,\n    /** 延迟挂载非触发器元素的事件，可以是一个返回 promise 的函数，可以是一个接收回调函数的函数 */\n    delayToFocus,\n    /** 延迟失焦，触发出口后等待执行 delayToBlur 完成后失焦 */\n    delayToBlur,\n    /** 每次退出列表回到入口是否移除列表事件 */\n    removeListenersEachExit = true,\n    /** 每次进入列表是否移除入口事件 */\n    removeListenersEachEnter,\n    /** 每次退出列表是否添加入口监听事件 */\n    addEntryListenersEachExit = true,\n    /** 阻止（列表移动）冒泡或捕获 */\n    stopPropagation: listStopPropagation = false,\n    /** 阻止（列表移动）默认行为 */\n    preventDefault,\n    /** 手动添加和移除监听事件，入口、列表、出口的监听事件，`removeListenersEachExit` 和 `removeListenersEachEnter` 将失效 */\n    manual,\n    /** 用于抹平 Safari 不同于其它浏览器，点击后 button 之类的元素不会被聚焦的问题 */\n    allowSafariToFocusAfterMousedown = true,\n    /** 用于内部调试 */\n    // demo = false,\n  } = options;\n\n  /** 入口们 */\n  const entries = [].concat(entry) // 转为数组\n    .filter(o => o != null) // 过滤空值\n    .map(ele => isObj(ele) ? ele : { node: ele }) // 元素转为对象，并且默认元素的值被看作对象的 node 属性\n    .map(entry => ({ // 对元素的属性进行默认处理\n      ...entry,\n      preventDefault: entry.preventDefault ?? true,\n      delay: entry.delay ?? delayToFocus,\n      type: entry.type === undefined ? [entry.key == null ? '' : \"keydown\", entry.node == null ? '' : \"click\"].filter(t => t != '') : [].concat(entry.type),\n      onExit: entry.onExit === true ? entry.on : entry.onExit, // 这个入口是开关吗\n    }))\n    .reduce(pickNodesAry, []); // 处理元素的 node 属性是数组的情况，将它分解成多个元素\n  /** 是否是空入口 */\n  const hasNoEntry = entries.length === 0;\n  /** 带切换的入口，如果 entry.onExit 有值，代表这个入口同时也是出口，也就是开关 */\n  const toggles = new Set(entries.map(e => isFun(e.onExit) ? e.node : null).filter(n => n != null).map(n => element(n)));\n  /** 默认入口，默认情况下，会从出口回到这个入口 */\n  let _trigger = element(trigger || entries[0]?.node);\n\n\n  const {\n    /** 封面节点 */\n    node: coverNode,\n    enterKey: coverEnterKey,\n    onEnter: onEnterCover,\n    exit: exitCover,\n  } = isObj(origin_cover) ? origin_cover : {};\n  /** 是否已经打开封面选项 */\n  const enabledCover = origin_cover != null && origin_cover !== false && coverNode !== false;\n  /** 封面即根元素 */\n  const coverIsRoot = enabledCover && (origin_cover === true || coverNode === true || coverNode == null);\n  /** 退出封面，封面的出口们 */\n  const exitsCover = [].concat(exitCover) // 转为数组\n    .filter(e => e != null) // 过滤空值\n    .map(e => isObj(e) ? e : { key: e }) // 元素转为对象，并且默认元素的值被看作对象的 key 属性\n    .map(e => ({ // 对元素的属性进行默认处理\n      ...e,\n      target: e.target ?? _trigger,\n    }));\n  /** 是否使用默认的离开封面方法，也即 tab 和 shift-tab */\n  const isDefaultExitCover = enabledCover && exitsCover.length === 0;\n\n\n  /** 列表 */\n  const list = new TabList();\n  /** 根元素 */\n  let root = null;\n  /** 封面 */\n  let cover = null;\n\n  list.recordPrev(null, initialActive ?? -1);\n\n  const {\n    key: isNext,\n    on: onNext,\n  } = isObj(next) ? next : { key: next };\n\n  const {\n    key: isPrev,\n    on: onPrev,\n  } = isObj(prev) ? prev : { key: prev };\n\n  /** 禁用左上角 esc 出口 */\n  const disabledEsc = onEscape === false;\n\n  /** 取消循环则设置头和尾焦点 */\n  const isClamp = !(loop ?? true);\n\n  /** 是否打开列表序列，按照序列的顺序进行焦点导航 */\n  const enabledTabSequence = !!(isNext || isPrev || sequence); // 自定义前进或后退焦点函数，则设置 sequence 为 true\n\n  /** 移动列表，是否阻止默认行为 */\n  const listPreventDefault = preventDefault ?? enabledTabSequence;\n\n  /** 进入了列表 */\n  let trappedList = false;\n  /** 进入了封面 */\n  let trappedCover = false;\n\n  /** 是否已添加监听事件 */\n  const listListeners = new ListenersCache();\n  /** 是否已添加入口的监听事件 */\n  const entryListeners = new ListenersCache();\n  /** 按键转发，监听事件 */\n  const keyForwards = new KeyForwardCache();\n\n  if (!manual) { // 如果不是手动添加事件，则注册入口、列表相关（封面、列表、出口）的事件\n    // 入口点击事件\n    addEntryListeners();\n\n    // 如果有入口不需要延迟，则立即加载列表的监听事件\n    const hasImmediateEntry = (hasNoEntry ? [{}] : entries).some(({ delay }) => !delay);\n\n    if (hasImmediateEntry) {\n\n      const {\n        root: newRoot, list: newList, cover: newCover,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(newList);\n      root = newRoot;\n      cover = newCover;\n\n      loadListRelatedListeners(root, list, cover);\n    }\n  }\n\n  const Return = {\n    /** 调用形式的入口 */\n    enter(entry) {\n      _trigger = _trigger || getActiveElement();\n\n      if (entry) {\n        const { on, target, delay } = entry;\n        return entryHandler({ fromInvoke: true }, on, target, delay);\n      } else {\n        for (let i = 0; i < entries.length; ++ i) {\n          const { on, type, node, target, delay } = entries[i];\n          const invokeType = \"invoke\";\n\n          if (type?.some(type => type == null || type === false || type === invokeType) || node == null) {\n            return entryHandler({ fromInvoke: true }, on, target, delay);\n          }\n        }\n        return entryHandler({ fromInvoke: true });\n      }\n    },\n    /** 调用形式的出口 */\n    exit(tempExit) {\n\n      const {\n        list: newList,\n        cover,\n        root,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n      if (tempExit) {\n        const { on, target: originTarget } = tempExit;\n        const target = element(originTarget);\n        return toExit(target, on);\n      } else {\n        const exits = getExits(exit, onEscape, enabledCover, cover, _trigger, delayToBlur);\n        for (let i = 0; i < exits.length; ++ i) {\n          const { on, type, target } = exits[i];\n          const invokeType = \"invoke\";\n  \n          if (type?.some(type => type == null || type === false || type === invokeType)) {\n            return toExit(target, on);\n          }\n        }\n      }\n\n      function toExit(target, on) {\n\n        if (list.isEmpty()) list.update(newList);\n\n        return exitHandler({ fromInvoke: true }, on, target, false, cover, list.data, root);\n      }\n    },\n    /** 移除所有的监听事件 */\n    removeListeners() {\n      listListeners.removeListeners();\n      entryListeners.removeListeners();\n    },\n    /** 移除列表相关的事件 */\n    removeListRelatedListeners() {\n      listListeners.removeListeners();\n    },\n    /** 移除入口事件 */\n    removeEntryListeners() {\n      entryListeners.removeListeners();\n    },\n    /** 添加入口的监听事件 */\n    addEntryListeners() {\n      addEntryListeners();\n    },\n    /** 添加列表相关（封面、列表、出口）的监听事件 */\n    addListRelatedListeners() {\n\n      const {\n        root,\n        list: newList,\n        cover,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      if (list.isEmpty()) list.update(newList);\n\n      loadListRelatedListeners(root, list, cover);\n    },\n    /** 添加转发 */\n    addForward(id, forward) {\n      let opts = null;\n      if (isFun(forward)) {\n        const {\n          root,\n          list: listData, head, tail,\n          cover,\n        } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n        opts = forward({ root, list: listData, head, tail, cover, curI: list.curI, prevI: list.prevI });\n      }\n      else opts = forward;\n\n      const { node: origin_node, on, key, target: origin_target } = opts;\n      const node = element(origin_node);\n      const target = element(origin_target);\n      keyForwards.push(id, node, e => {\n        if (key?.(e, list.prevI, list.curI)) {\n          e.preventDefault();\n          on?.();\n          tickFocus(target);\n        }\n      });\n    },\n    /** 移除转发 */\n    removeForward(id) {\n      keyForwards.remove(id);\n    },\n    /** 更新列表 */\n    updateList(newList) {\n      const _newList = newList.map(item => element(item)).filter(item => item != null);\n      list.update(_newList);\n    },\n    /** 当前聚焦的列表单项序号 */\n    i(newI) {\n      if (list.has(newI) && trappedList) {\n        list.recordSequenceByIdx(newI);\n        const { prev, prevI, cur, curI } = list;\n        onMove?.({ e: { fromI: true }, prev, prevI, cur, curI });\n        focus(subNodes[curI]);\n        return newI;\n      }\n      else return list.curI < 0 ? list.prevI : list.curI;\n    },\n  };\n\n  return Return;\n\n  /** 入口 handler */\n  function entryHandler(e, onEnter, target, delay, preventDefault, stopPropagation) {\n\n    // 如果已经在列表或者封面，则不再触发入口；出口不需要该操作，因为不存在从出口退出到出口的子元素的情况，相反，存在入口进入到入口子元素的情况。\n    if (trappedCover || trappedList) return;\n\n    preventDefault && e.preventDefault?.();\n    stopPropagation && e.stopPropagation?.();\n\n    Promise.resolve(onEnter?.(e)).then(_ => {\n      delayToProcess(delay, findNodesToLoadListenersAndFocus);\n    });\n\n    /** 寻找节点，加载事件监听器，聚焦 subNodes 或 coverNode */\n    function findNodesToLoadListenersAndFocus() {\n\n      if (list.isEmpty()) {\n        const { list: newList } = getListNodes(subNodes);\n        list.update(newList);\n      }\n\n      if (root == null)\n        root = getRootNode(rootNode, list.head, list.tail);\n\n      if (cover == null && enabledCover)\n        cover = getCoverNode(coverNode, coverIsRoot, root);\n\n      if (!manual)\n        loadListRelatedListeners(root, list, cover);\n      if (target !== false)\n        focusTarget(cover, list, root);\n    }\n    \n    function focusTarget(cover, listInfo, rootNode) {\n      const list = listInfo.data;\n      const { prev, head, curI } = listInfo;\n      const defaultTarget = prev || head;\n      const gotTarget = getTarget(target, cover, list, rootNode, enabledCover, curI, defaultTarget, e);\n      if (enabledTabSequence) { // 序列模式\n        const targetIdx = list.indexOf(gotTarget);\n        if (targetIdx > -1) {\n          listInfo.recordSequenceByIdx(targetIdx); // 只有在聚焦列表元素时才设置，否则会破坏原有 curI\n          const { cur, curI } = listInfo;\n          onMove?.({ e, prev: null, cur, prevI: -1, curI });\n          trappedList = true;\n        }\n      } else { // 范围模式\n        if (rootNode.contains(gotTarget) && gotTarget !== cover) {\n          listInfo.recordRange(gotTarget);\n          const { cur, curI } = listInfo;\n          onMove?.({ e, prev: null, cur, prevI: -1, curI });\n          trappedList = true;\n        }\n      }\n      if (enabledCover && (gotTarget === cover || trappedList === true)) trappedCover = true;\n      tickFocus(gotTarget);\n    }\n  }\n\n  /** 出口 handler */\n  function exitHandler(e, on, target, delay, cover, listData, root, ef, preventDefault, stopPropagation) {\n\n    if (!trappedList || \n      !(isFun(ef) ? ef({ e, prev: list.prev, cur: list.cur, prevI: list.prevI, curI: list.curI }) : true))\n      return false;\n\n    preventDefault && e.preventDefault?.(); // 阻止默认行为，例如 tab 到下一个元素，例如 entry button 触发 click 事件\n    stopPropagation && e.stopPropagation?.();\n\n    if (enabledTabSequence) list.recordSequenceByIdx(-1);\n    else list.recordRange(null);\n\n    trappedList = false;\n\n    const gotTarget = getTarget(target, cover, listData, root, enabledCover, list.curI, _trigger, e);\n\n    if (gotTarget) return exitListWithTarget();\n    else return exitListWithoutTarget();\n\n    /** 退出列表，有 target */\n    function exitListWithTarget() {\n\n      Promise.resolve(on?.(e)).then(_ => {\n        delayToProcess(delay, focusThenRemoveListeners);\n      });\n\n      function focusThenRemoveListeners() {\n        if (!manual) {\n          if (gotTarget !== cover)\n            removeListRelatedListeners();\n          if (addEntryListenersEachExit)\n            addEntryListeners();\n        }\n        onMove?.({ e, prev: list.prev, cur: null, prevI: list.prevI, curI: -1 });\n        focus(gotTarget);\n      }\n    }\n\n    /** 退出列表，无 target */\n    function exitListWithoutTarget() {\n\n      Promise.resolve(on?.(e)).then(_ => {\n\n        if (gotTarget === false) { // 如果显式设为 false，则直接退出，不聚焦，会在一个列表退出另一个列表移动的场景使用\n\n          const removeListenersWithoutFocus = focusThenRemoveListeners();\n          removeListenersWithoutFocus();\n          return ;\n        }\n\n        const focusTriggerThenRemoveListeners = focusThenRemoveListeners(_trigger);\n        delayToProcess(delay, focusTriggerThenRemoveListeners);\n      });\n\n      function focusThenRemoveListeners(focusTarget) {\n        return _ => {\n          if (!manual) {\n            removeListRelatedListeners();\n            if (addEntryListenersEachExit)\n              addEntryListeners();\n          }\n          onMove?.({ e, prev: list.prev, cur: null, prevI: list.prevI, curI: -1 });\n          focusTarget && focus(focusTarget);\n        }\n      }\n    }\n  }\n\n  /** 生成事件行为，添加事件监听器 */\n  function loadListRelatedListeners(root, listInfo, cover) {\n\n    const list = listInfo.data;\n    const head = listInfo.head;\n    const tail = listInfo.tail;\n\n    if (!listListeners.isEmpty) return ; // 列表的监听事件没有移除之前，不需要再次添加列表监听事件\n\n    if (root == null)\n      throw new Error(`没有找到元素 ${rootNode}，您可以尝试 delayToFocus 选项，等待元素 ${rootNode} 渲染完毕后进行聚焦。`);\n    if (head == null || tail == null)\n      throw new Error(\"至少需要包含两个可以聚焦的元素，如果元素需要等待渲染，您可以尝试 delayToFocus 选项。\");\n\n    // 添加除 trigger 以外其它和焦点相关的事件监听器\n    addListRelatedListeners();\n\n    /** 添加焦点需要的事件监听器 */\n    function addListRelatedListeners() {\n\n      /** 是否是来自默认封面出口的聚焦 */\n      let focusFromDefaultExitCover = false;\n\n      const useActiveIndex = () => [listInfo.curI, listInfo.recordSequenceByIdx.bind(listInfo)];\n\n      const isTrappedList = () => hasNoEntry ? true : trappedList;\n\n      // 在焦点循环中触发聚焦\n      const keyListMoveHandler = enabledTabSequence ? focusNextListItemBySequence : focusNextListItemByRange;\n\n      /** 出口们，列表的出口们，list 的出口们 */\n      const exits = getExits(exit, onEscape, enabledCover, cover, _trigger, delayToBlur);\n      const {\n        keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n        clickExits_wild, focusExits_wild,\n        outListExits,\n      } = splitExits(exits, root);\n\n      /** 非跟节点内的，是根节点之外的出口 */\n      const clickListExitHandlers_wild = clickExits_wild.map(exit => [element(exit?.node), clickListExitHandler_wild(exit)]);\n      const focusListExitHandlers_wild = focusExits_wild.map(exit => [element(exit?.node), focusListExitHandler_wild(exit)]);\n\n      listListeners.push(root, \"focusin\", focusTrapListHandler);\n\n      listListeners.push(root, \"focusout\", blurTrapListHandler);\n\n      if (!root.contains(cover) && cover != null) {\n\n        listListeners.push(cover, \"focus\", focusTrapCoverHandler);\n\n        listListeners.push(cover, \"blur\", blurTrapCoverHandler);\n      }\n\n      listListeners.push(root, \"keydown\", e => {\n        let exited = false;\n        // 列表键盘出口\n        if (hasKeyExits)\n          exited = keyListExitHandler(e);\n        // 列表中移动，监听移动的键盘事件，例如 tab 或其它自定义组合键\n        if (!exited) // 退出的优先级高于列表移动\n          keyListMoveHandler(e);\n      });\n\n      listListeners.push(root, \"click\", e => {\n        // 点击聚焦列表单项，只在手动列表时监听点击，因为自动模式不需要记录 list.curI\n        clickListItemHandler(e);\n        // 列表点击出口\n        hasClickExits && clickListExitHandler(e);\n      });\n\n      // 由于 click 事件在 focus 之后，这里用来判断是否通过点击进入列表，用于纠错未知进入列表的焦点定位\n      listListeners.push(root, \"mousedown\", mousedownListItemHandler);\n\n      if (hasFocusExits) {\n        // 列表聚焦出口\n        listListeners.push(root, \"focusin\", focusListExitHandler);\n      }\n\n      // 非列表内的出口\n      focusListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"focus\", handler);\n      });\n      clickListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"click\", handler);\n      });\n\n      if (cover != null) {\n        // 封面的事件\n        listListeners.push(cover, \"keydown\", keyCoverHandler);\n      }\n\n      // flush\n      listListeners.addListeners();\n\n\n\n      let isMouseDown = false;\n      /** 标记是否从封面进入列表，用于防止纠正列表焦点的误判，用于野生封面 */\n      let isEnterFromCover = false;\n\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n       |          LIST HANDLERS          |\n       +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function focusTrapListHandler(e) {\n\n        /** 当前焦点 */\n        const target = e.target;\n        /** 前一个焦点 */\n        const relatedTarget = e.relatedTarget;\n\n        // 默认封面退出\n        if (focusFromDefaultExitCover) {\n          focusFromDefaultExitCover = false;\n          return;\n        }\n\n        // 进入封面（封面在列表中）\n        if (enabledCover && target === cover) { // TODO: 保留确认，或是否需要添加 `&& trappedList` 条件\n          trappedCover = true;\n          return ;\n        }\n\n        // 纠正进入封面，从外部进入列表，如果没有通过封面，则重新聚焦封面\n        if (enabledCover && isMouseDown === false && trappedCover === false) {\n          tickFocus(cover);\n          return ;\n        }\n\n        // 调用范围模式下的 onPrev、onNext、onMove，此时焦点正在列表内移动\n        if (listInfo.rangeBeforePrevCallback || listInfo.rangeBeforeNextCallback) {\n          listInfo.recordRange(target);\n          listInfo.rangeBeforePrevCallback = false;\n          listInfo.rangeBeforeNextCallback = false;\n          const { cur, prev } = listInfo;\n          (listInfo.rangeBeforePrevCallback ? onNext : onPrev)?.({ e, prev, cur, prevI: -1, curI: -1 });\n          onMove?.({ e, prev, cur, prevI: -1, curI: -1 });\n          return ;\n        }\n\n        // 纠正外部聚焦进来的焦点。如果是内部的聚焦，无需纠正，防止嵌套情况的循环问题\n        if (correctionTarget !== false &&\n          trappedList === false &&\n          isMouseDown === false &&\n          (relatedTarget == null || // 上一个焦点为空\n            !root.contains(relatedTarget))) // 上一个焦点在根节点 root 以外的区域\n        {\n          const defaultLast = listInfo.prev || listInfo.head;\n          const originGotCorrectionTarget = correctionTarget?.({ list, cover, root, last: listInfo.prev, lastI: listInfo.prevI, e }) ?? defaultLast;\n          const gotCorrectionTarget = element(originGotCorrectionTarget);\n\n          onMoveTargetFromOuter(gotCorrectionTarget);\n          tickFocus(gotCorrectionTarget);\n        }\n\n        // 关闭焦点纠正，同时从外部进来了焦点\n        if (correctionTarget === false &&\n          trappedList === false &&\n          isMouseDown === false &&\n          (relatedTarget == null || !root.contains(relatedTarget)))\n          onMoveTargetFromOuter(target)\n\n        /** 矫正时的 onMove 调用 */\n        function onMoveTargetFromOuter(target) {\n          if (enabledTabSequence) { // 序列模式\n            const targetIndex = list.findIndex(item => item === target);\n            if (targetIndex > -1) {\n              listInfo.recordSequenceByIdx(targetIndex);\n              onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n              trappedList = true; // 在下一次 触发 focusin 调用 focusTrapListHandler 之前，设为 true。通过 api 调用的 focus，触发的 focusin 事件会被“同步”调用\n            }\n          } else { // 范围模式\n            listInfo.recordRange(target);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n            trappedList = true; // 在下一次 触发 focusin 调用 focusTrapListHandler 之前，设为 true。通过 api 调用的 focus，触发的 focusin 事件会被“同步”调用\n          }\n        }\n      }\n\n      function blurTrapListHandler(e) {\n        // 用于保护可切换的入口（开关，同时作为出口的入口）能够被触发\n        if (toggles.has(e.relatedTarget)) return;\n\n        tick(() => { // 延迟后获取下一次聚焦的元素，否则当前聚焦元素是 body\n\n          const active = getActiveElement();\n          const isOutRootNode = !root.contains(active);\n          const isActiveCover = active === cover;\n\n          // 从封面退出\n          if (e.target === cover && isOutRootNode) {\n            trappedCover = false; // 退出封面\n            return;\n          }\n\n          let isOutList = null;\n          if (isActiveCover || isOutRootNode) {\n            isOutList = outListExitHandler(e);\n            if (enabledTabSequence) listInfo.recordSequenceByIdx(-1);\n            else listInfo.recordRange(null);\n          }\n          if (isOutList === false) return; // 不符合 outlist 退出列表的条件\n\n          if (isActiveCover) { // 聚焦在封面\n            trappedList = false;\n          } else if (isOutRootNode) { // 聚焦在非封面、非列表的区域\n            trappedList = false;\n            trappedCover = false;\n          }\n        });\n      }\n\n      function mousedownListItemHandler(e) {\n        isMouseDown = true;\n        tick(() => isMouseDown = false); // mousedown 没有出口，只能使用定时器，isMouseDown 主要在两个 focus 事件中使用，当触发 focus 时，此定时器还未执行，以此保证正确性\n\n        let targetItem;\n        if (!enabledTabSequence || // 未打开 sequence 属性 或者\n          (enabledTabSequence && // 已打开 sequence 属性 并且\n            (targetItem = list.find(item => item.contains(e.target))) // 点击的目标是列表中的元素\n          )\n        ) {\n          trappedList = true;\n          if (enabledCover) trappedCover = true;\n          // 兼容 Safari（桌面端），具体问题查看：https://github.com/wswmsword/web-experiences/tree/main/browser/safari-button-focus\n          if (allowSafariToFocusAfterMousedown && targetItem && window.safari !== undefined) {\n            focus(targetItem); // Safari 不会聚焦按钮元素，这里强制使用 api 聚焦\n            e.preventDefault(); // 阻止默认行为可以避免 targetItem 失焦\n          }\n        }\n      }\n\n      /** 点击聚焦列表某一单项 */\n      function clickListItemHandler(e) {\n\n        const target = e.target;\n\n        if (enabledTabSequence) { // 序列模式\n\n          const targetIndex = list.findIndex(item => item.contains(target));\n          if (targetIndex > -1) {\n            const { prev: prevBeforeRecord, prevI: prevIBeforeRecord, curI: curIBeforeRecord } = listInfo;\n            listInfo.recordSequenceByIdx(targetIndex);\n  \n            let { prev, prevI, cur, curI } = listInfo;\n            if (curIBeforeRecord < 0) { // 从外部进入\n              if (prevIBeforeRecord !== targetIndex) { // 上一次进入 和 本次进入 的元素不同\n                prev = prevBeforeRecord;\n                prevI = prevIBeforeRecord;\n              }\n            }\n  \n            onClick?.({ e, prev, cur, prevI, curI });\n            if (curIBeforeRecord !== curI) // 从外部进入 或者 列表内的移动\n              onMove?.({ e, prev, cur, prevI, curI });\n          }\n        } else { // 范围模式\n\n          const { prev: prevBeforeRecord, cur: curBeforeRecord } = listInfo;\n          listInfo.recordRange(target);\n\n          let { prev, cur } = listInfo;\n          if (curBeforeRecord == null) { // 外部进入\n            if (prevBeforeRecord !== target) {\n              prev = prevBeforeRecord;\n            }\n          }\n\n          onClick?.({ e, prev, cur, prevI: -1, curI: -1 });\n          if (curBeforeRecord !== cur) // 从外部进入 或者 列表内的移动\n            onMove?.({ e, prev, cur, prevI: -1, curI: -1 });\n        }\n      }\n\n      /** 手动聚焦下一个元素 */\n      function focusNextListItemBySequence(e) {\n        if (e.target === cover) return;\n        if (!isTrappedList()) return;\n\n        const [index_, setIndex] = useActiveIndex();\n        const index = Math.max(0, index_);\n        const itemsLen = list.length;\n        let focused = false;\n        if ((isNext ?? isTabForward)(e)) {\n          const incresedI = index + 1;\n          let nextI = isClamp ? Math.min(itemsLen - 1, incresedI) : incresedI;\n          nextI %= itemsLen;\n          onNext?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          onMove?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          setIndex(nextI);\n          focus(list[nextI]);\n          focused = true;\n        }\n        else if ((isPrev ?? isTabBackward)(e)) {\n          const decresedI = index - 1;\n          let nextI = isClamp ? Math.max(0, decresedI) : decresedI;\n          nextI = (nextI + itemsLen) % itemsLen;\n          onPrev?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          onMove?.({ e, prev: list[index], cur: list[nextI], prevI: index, curI: nextI });\n          setIndex(nextI);\n          focus(list[nextI]);\n          focused = true;\n        }\n\n        if (focused) {\n          listPreventDefault && e.preventDefault();\n          listStopPropagation && e.stopPropagation();\n        }\n      };\n\n      /** 按下 tab，以浏览器的行为聚焦下个元素 */\n      function focusNextListItemByRange(e) {\n        const head = list[0];\n        const tail = list.at(-1);\n        const current = e.target;\n        if (current === cover) return;\n        if (!isTrappedList()) return;\n\n        let needToPreventDefault = false;\n        let focused = false;\n        if (isTabForward(e)) {\n          listInfo.recordRange(current);\n          listInfo.rangeBeforeNextCallback = true;\n          if (current === tail) {\n            needToPreventDefault = true;\n            if (!isClamp) focus(head);\n          }\n          if (current === root) {\n            needToPreventDefault = true;\n            focus(head);\n          }\n          focused = true;\n        }\n        else if (isTabBackward(e)) {\n          listInfo.recordRange(current);\n          listInfo.rangeBeforePrevCallback = true;\n          if (current === head) {\n            needToPreventDefault = true;\n            if (!isClamp) focus(tail);\n          }\n          if (current === root) {\n            needToPreventDefault = true;\n            focus(tail);\n          }\n          focused = true;\n        }\n\n        if (needToPreventDefault || (focused && listPreventDefault)) e.preventDefault();\n        if (focused && listStopPropagation) e.stopPropagation();\n      };\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |         COVER HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function focusTrapCoverHandler() { trappedCover = true; } // 捕获点击封面的情况\n\n      function blurTrapCoverHandler() { // 捕获点击空白区域的情况\n        if (isEnterFromCover) // 用于防止纠正列表焦点的误判，如果是进入列表，则 trappedCover 还应是 true\n          isEnterFromCover = false;\n        else\n          trappedCover = false;\n      }\n\n      /** 封面的键盘事件响应 */\n      function keyCoverHandler(e) {\n        if (e.target !== cover) return;\n        if (!(trappedCover && !trappedList)) return; // 继续执行，必须满足焦点在封面上，且不在列表中\n\n        // 入口（封面），从封面进入列表\n        if((coverEnterKey ?? isEnterEvent)(e) && !trappedList) {\n          e.preventDefault();\n          isEnterFromCover = true;\n          trappedList = true;\n          onEnterCover?.(e);\n          if (enabledTabSequence) {\n            listInfo.recordSequenceByIdx(Math.max(0, listInfo.prevI));\n            focus(listInfo.cur);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n          } else {\n            listInfo.recordRange(listInfo.prev == null ? listInfo.head : listInfo.prev);\n            focus(listInfo.cur);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: -1 });\n          }\n          return;\n        }\n\n        // 出口（封面），从封面回到入口\n        for (let i = 0; i < exitsCover.length; ++ i) {\n          const { key, on, target: origin } = exitsCover[i];\n          const target = element(origin);\n          if (key?.(e, listInfo.prevI, listInfo.curI)) {\n            exitCoverHandler(e, on, target);\n            return;\n          }\n        }\n\n        // 默认出口，默认行为，默认的行为的场景是包含子元素的长列表\n        if (isDefaultExitCover &&\n          isTabForward(e)) { // 虽然也是离开列表，但是这里不移除监听事件，因为移除后就不能再次进入封面\n          focusFromDefaultExitCover = true;\n          focus(tail);\n          return;\n        }\n\n        /** 退出封面焦点的行为 */\n        function exitCoverHandler(e, onExit, target) {\n          onExit?.(e);\n          target && focus(target);\n          removeListRelatedListeners();\n        }\n      }\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |            + START +            |\n      |          EXIT HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function outListExitHandler(e) {\n        for (let i = 0; i < outListExits.length; ++ i) {\n          const { on, target: origin_target, delay, preventDefault, stopPropagation } = outListExits[i];\n          const target = element(origin_target);\n          return exitHandler(e, on, target, delay, cover, list, root, outListExits[i].if, preventDefault, stopPropagation);\n        }\n      }\n\n      function exitHandlerWithCondition(e, exit, condition) {\n        const { node: origin_node, on, target: origin_target, delay, preventDefault, stopPropagation } = exit;\n        const { data: list, head, tail } = listInfo;\n        const stringOrNode = isFun(origin_node) ? origin_node({ list, head, tail }) : origin_node;\n        const node = element(stringOrNode);\n        const target = element(origin_target);\n\n        if (condition(e, node, exit.key)) // 未设置点击目标\n          return false;\n        const res = exitHandler(e, on, target, delay, cover, list, root, exit.if, preventDefault, stopPropagation);\n        return res !== false;\n      }\n\n      function clickExitHandler(e, exit) {\n\n        const cantClick = (e, node) => (node != null && !node.contains(e.target)) || node == null; // 点击目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantClick);\n      }\n\n      /** 点击列表的出口 */\n      function clickListExitHandler(e) {\n        for (let i = 0; i < clickExits.length; ++ i) {\n          const isOK = clickExitHandler(e, clickExits[i]);\n          if (isOK) break; // 只生效第一个满足条件的出口\n        }\n      }\n\n      function focusExitHandler(e, exit) {\n\n        const cantFocus = (e, node) => (node != null && e.target !== node) || node == null; // 聚焦目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantFocus);\n      }\n\n      /** 聚焦列表一个单项而退出 */\n      function focusListExitHandler(e) {\n\n        for (let i = 0; i < focusExits.length; ++ i) {\n          const isOK = focusExitHandler(e, focusExits[i])\n          if (isOK) break;\n        }\n      }\n\n      function keyExitHandler(e, exit) {\n\n        const cantKey = (e, node, key) => (node != null && e.target !== node) || (!key?.(e, listInfo.prevI, listInfo.curI)); // 聚焦目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantKey);\n      }\n\n      /** 触发键盘退出列表，退出列表焦点 */\n      function keyListExitHandler(e) {\n        if (e.target === cover) return; // 被封面触发直接返回\n\n        if (disabledEsc && isEscapeEvent(e)) return;\n\n        for (let i = 0; i < keyExits.length; ++ i) {\n          const isOK = keyExitHandler(e, keyExits[i]);\n          if (isOK) return true;\n        }\n      }\n\n      function clickListExitHandler_wild(exit) {\n        return function(e) { clickExitHandler(e, exit); }\n      }\n\n      function focusListExitHandler_wild(exit) {\n        return function(e) { focusExitHandler(e, exit); }\n      }\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |             - END -             |\n      |          EXIT HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n    };\n  }\n\n  /** 添加入口事件 */\n  function addEntryListeners() {\n\n    if (!entryListeners.isEmpty) return;\n\n    for (let i = 0; i < entries.length; ++ i) {\n      const entry = entries[i];\n      const { node: origin, on, key, type, target, delay, onExit, preventDefault, stopPropagation } = entry;\n      const ef = entry.if;\n      const types = [].concat(type);\n      const allTypes = [\"keydown\", \"focus\", \"click\"];\n      const node = element(origin);\n\n      types.forEach(type => {\n        if (node && allTypes.includes(type)) {\n\n          /** 是否是键盘事件 */\n          const isKey = type === \"keydown\";\n          /** 如果是键盘事件，则判断键位是否匹配，如果是非键盘事件，则直接返回 true */\n          const ifKey = isKey ? e => key?.(e, list.prevI, list.curI) : _ => true;\n          entryListeners.push(node, type, toggleHandler(ifKey)); // 保存事件信息\n        }\n      });\n      \n      function toggleHandler(ifKey) {\n        return e => {\n          if (\n            (isFun(ef)\n              ? ef({ e, prev: list.prev, cur: list.cur, prevI: list.prevI, curI: list.curI })\n              : true) &&\n            ifKey(e))\n            toggleEntryAndExit(e);\n        }\n      }\n\n      function toggleEntryAndExit(e) {\n\n        if (trappedList) {\n          if (isFun(onExit)) { // 若存在 onExit，则表示该入口同时是出口，是开关\n            const { list, cover, root } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n            exitHandler(e, onExit, target, false, cover, list, root, null, preventDefault, stopPropagation);\n          }\n        }\n        else {\n          entryHandler(e, on, target, delay, preventDefault, stopPropagation);\n          if (removeListenersEachEnter && !manual)\n            entryListeners.removeListeners();\n        }\n      }\n    }\n\n    // flush\n    entryListeners.addListeners();\n  }\n\n  /** 移除监听事件 */\n  function removeListRelatedListeners() {\n\n    // 如果是默认的，没有定义出口的封面，则不移除事件\n    if (isDefaultExitCover) return;\n\n    if (removeListenersEachExit && !manual) {\n      listListeners.removeListeners();\n    }\n  }\n};\n\nexport default focusFly;"],"names":["objToStr","obj","Object","prototype","toString","call","isObj","isFun","fun","getActiveElement","document","activeElement","querySelector","str","element","e","tick","fn","setTimeout","isSelectableInput","node","tagName","toLowerCase","select","isEnterEvent","key","keyCode","isEscapeEvent","isTabEvent","isTabForward","shiftKey","isTabBackward","findLowestCommonAncestorNode","x","y","contains","range","Range","setStartBefore","setEndAfter","collapsed","commonAncestorContainer","focus","tickFocus","getRootNode","rootStr","listHead","listTail","_element","getListNodes","listAry","list","map","item","filter","head","tail","slice","getCoverNode","coverStr","coverIsRoot","root","getKeyNodes","originRoot","originList","originCover","_getListNodes","cover","pickNodesAry","acc","cur","isAryNodes","Array","isArray","nodes","n","_extends","concat","splitExits","exits","isInnerRoot","_exits$reduce","reduce","click","click_wild","focus_wild","outList","includeType","type","_e$type","includes","fill","keyExits","clickExits","focusExits","clickExits_wild","focusExits_wild","outListExits","hasClickExits","length","hasFocusExits","hasKeyExits","getExits","exit","onEscape","enabledCover","trigger","delayToBlur","_tempExits$0$on","_tempExits$","tempExits","o","ele","_e$preventDefault","_e$delay","preventDefault","delay","undefined","t","_onEscape","on","escapeExit","target","delayToProcess","processor","_getDelayType","getDelayType","promiseDelay","callbackDelay","commonDelay","delayRes","then","isFunctionDelay","getTarget","activeIndex","defaultTarget","gotTarget","last","lastI","ListenersCache","cache","isEmpty","_proto","push","handler","clean","addListeners","forEach","l","_l$node","addEventListener","removeListeners","_l$node2","removeEventListener","KeyForwardCache","Map","_proto2","has","id","set","remove","_this","ids","get","TabList","data","prevI","curI","_prev","_cur","rangeBeforePrevCallback","rangeBeforeNextCallback","_proto3","update","splice","apply","at","i","record","recordPrev","recordCur","recordSequnce","recordRange","prev","recordSequenceByIdx","_createClass","v","focusFly","_ref","_entries$","offset","arguments","rootNode","subNodes","options","Error","sequence","loop","next","entry","onClick","onMove","origin_cover","initialActive","correctionTarget","delayToFocus","_options$removeListen","removeListenersEachExit","removeListenersEachEnter","_options$addEntryList","addEntryListenersEachExit","_options$stopPropagat","stopPropagation","listStopPropagation","manual","_options$allowSafariT","allowSafariToFocusAfterMousedown","entries","_entry$preventDefault","_entry$delay","onExit","hasNoEntry","toggles","Set","_trigger","_ref2","coverNode","coverEnterKey","enterKey","onEnterCover","onEnter","exitCover","exitsCover","_e$target","isDefaultExitCover","_ref3","isNext","onNext","_ref4","isPrev","onPrev","disabledEsc","isClamp","enabledTabSequence","listPreventDefault","trappedList","trappedCover","listListeners","entryListeners","keyForwards","addEntryListeners","hasImmediateEntry","some","_ref5","_getKeyNodes","newRoot","newList","newCover","loadListRelatedListeners","Return","enter","entryHandler","fromInvoke","_loop","_entries$i","invokeType","_ret","tempExit","_getKeyNodes2","originTarget","toExit","_loop2","_exits$i","_ret2","exitHandler","removeListRelatedListeners","removeEntryListeners","addListRelatedListeners","_getKeyNodes3","addForward","forward","opts","_getKeyNodes4","listData","_opts","origin_node","origin_target","removeForward","updateList","_newList","newI","fromI","_e$preventDefault2","_e$stopPropagation","Promise","resolve","_","findNodesToLoadListenersAndFocus","_getListNodes2","focusTarget","listInfo","targetIdx","indexOf","ef","_e$preventDefault3","_e$stopPropagation2","exitListWithTarget","exitListWithoutTarget","focusThenRemoveListeners","removeListenersWithoutFocus","focusTriggerThenRemoveListeners","focusFromDefaultExitCover","useActiveIndex","bind","isTrappedList","keyListMoveHandler","focusNextListItemBySequence","focusNextListItemByRange","_splitExits","clickListExitHandlers_wild","clickListExitHandler_wild","focusListExitHandlers_wild","focusListExitHandler_wild","focusTrapListHandler","blurTrapListHandler","focusTrapCoverHandler","blurTrapCoverHandler","exited","keyListExitHandler","clickListItemHandler","clickListExitHandler","mousedownListItemHandler","focusListExitHandler","_ref6","_ref7","keyCoverHandler","isMouseDown","isEnterFromCover","relatedTarget","_ref8","_correctionTarget","defaultLast","originGotCorrectionTarget","gotCorrectionTarget","onMoveTargetFromOuter","targetIndex","findIndex","active","isOutRootNode","isActiveCover","isOutList","outListExitHandler","targetItem","find","window","safari","prevBeforeRecord","prevIBeforeRecord","curIBeforeRecord","curBeforeRecord","_useActiveIndex","index_","setIndex","index","Math","max","itemsLen","focused","incresedI","nextI","min","decresedI","current","needToPreventDefault","_exitsCover$i","origin","exitCoverHandler","_outListExits$i","exitHandlerWithCondition","condition","stringOrNode","res","clickExitHandler","cantClick","isOK","focusExitHandler","cantFocus","keyExitHandler","cantKey","_loop3","types","allTypes","isKey","ifKey","toggleHandler","toggleEntryAndExit","_getKeyNodes5"],"mappings":"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"}