{"version":3,"file":"focus-no-jutsu.umd.js","sources":["../utils.js","../index.js"],"sourcesContent":["/** Object.prototype.toString.call 快捷方式 */\nexport const objToStr = obj => Object.prototype.toString.call(obj);\n\n/** 参数是否是对象 */\nexport const isObj = obj => objToStr(obj) === \"[object Object]\";\n\n/** 是否为函数 */\nexport const isFun = fun => objToStr(fun) === \"[object Function]\";\n\n/** document.activeElement 的快捷方式 */\nexport const getActiveElement = () => document.activeElement;\n\n/** document.querySelector 的快捷方式 */\nexport const querySelector = str => document.querySelector(str);\n\n/** 通过字符串查找节点，或者直接返回节点 */\nexport const element = e => typeof e === \"string\" ? querySelector(e) : e;\n\n/** 滴答 */\nexport const tick = function(fn) {\n  setTimeout(fn, 0);\n};\n\n/** 是否是 input 可 select 的元素 */\nexport const isSelectableInput = function(node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\n/** 是否按下了 enter */\nexport const isEnterEvent = function(e) {\n  return e.key === \"Enter\" || e.keyCode === 13;\n};\n\n/** 按键是否是 esc */\nexport const isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\n/** 按键是否是 tab */\nexport const isTabEvent = function(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n/** 是否是向前的 tab */\nexport const isTabForward = function(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n/** 是否是向后的 tab */\nexport const isTabBackward = function(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\n/** 找到两个元素的最小公共祖先元素 */\nexport const findLowestCommonAncestorNode = function(x, y) {\n  if (x == null || y == null) return null;\n  if (x.contains(y)) return x;\n  if (y.contains(x)) return y;\n\n  const range = new Range();\n  range.setStartBefore(x);\n  range.setEndAfter(y);\n  if (range.collapsed) {\n     range.setStartBefore(y);\n     range.setEndAfter(x);\n  }\n  return range.commonAncestorContainer;\n};","import { objToStr, isObj, isFun, getActiveElement, element, tick, isSelectableInput, isEnterEvent, isEscapeEvent, isTabForward, isTabBackward, findLowestCommonAncestorNode } from \"./utils\";\n\n/** 聚焦，如果是 input，则聚焦后选中 */\nconst focus = function(e) {\n  e.focus();\n  if (isSelectableInput(e))\n    e.select();\n};\n\n/** 尝试聚焦，如果聚焦失效，则下个 setTimeout 再次聚焦 */\nconst tickFocus = function(e) {\n  if (e == null) tick(() => e && focus(e));\n  else focus(e);\n};\n\n/** 手动聚焦下一个元素 */\nconst focusNextListItemBySequence = (subNodes, useActiveIndex, isClamp, isNext, isPrev, onNext, onPrev, coverNode, onMove, trappedList) => e => {\n  if (e.target === coverNode) return;\n  if (!trappedList()) return;\n\n  const [index_, setIndex] = useActiveIndex();\n  const index = Math.max(0, index_);\n  const itemsLen = subNodes.length;\n  if ((isNext ?? isTabForward)(e)) {\n    const incresedI = index + 1;\n    let nextI = isClamp ? Math.min(itemsLen - 1, incresedI) : incresedI;\n    nextI %= itemsLen;\n    onNext?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    onMove?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    setIndex(nextI);\n    focus(subNodes[nextI]);\n    e.preventDefault();\n  }\n  else if ((isPrev ?? isTabBackward)(e)) {\n    const decresedI = index - 1;\n    let nextI = isClamp ? Math.max(0, decresedI) : decresedI;\n    nextI = (nextI + itemsLen) % itemsLen;\n    onPrev?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    onMove?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    setIndex(nextI);\n    focus(subNodes[nextI]);\n    e.preventDefault();\n  }\n};\n\n/** 按下 tab，以浏览器的行为聚焦下个元素 */\nconst focusNextListItemByRange = (list, isClamp, onNext, onPrev, rootNode, coverNode, trappedList) => e => {\n  const head = list[0];\n  const tail = list.at(-1);\n  const current = e.target;\n  if (current === coverNode) return;\n  if (!trappedList()) return;\n\n  if (isTabForward(e)) {\n    onNext?.({ e });\n    if (current === tail) {\n      e.preventDefault();\n      if (!isClamp) focus(head);\n    }\n    if (current === rootNode) {\n      e.preventDefault();\n      focus(head)\n    }\n  }\n  else if (isTabBackward(e)) {\n    onPrev?.({ e });\n    if (current === head) {\n      e.preventDefault();\n      if (!isClamp) focus(tail);\n    }\n    if (current === rootNode) {\n      e.preventDefault();\n      focus(tail);\n    }\n  }\n};\n\n/** 获取关键节点 */\nconst getKeyNodes = function(originRoot, originList, originCover, coverIsRoot) {\n  const list = originList.map(item => element(item)).filter(item => item != null);\n  const head = list[0];\n  const tail = list.slice(-1)[0];\n  const root = element(originRoot) ?? findLowestCommonAncestorNode(head, tail);\n  const cover = coverIsRoot ? root : element(originCover);\n\n  return {\n    root,\n    list,\n    head,\n    tail,\n    cover,\n  };\n};\n\n/** 用于处理节点属性可以传递数组的情况，用于入口和出口 */\nconst pickNodesAry = function(acc, cur) {\n  const isAryNodes = Array.isArray(cur.node);\n  const nodes = isAryNodes ? cur.node.map(n => ({\n    ...cur,\n    node: n,\n  })) : cur;\n  return acc.concat(nodes);\n};\n\n/** 获取分割的出口 */\nconst splitExits = function(exits, root) {\n  /** 生效的节点是否在根元素内部（列表中） */\n  const isInnerRoot = node => (node != null && root.contains(element(node))) || node == null;\n\n  const [keyExits, clickExits, focusExits, clickExits_wild, focusExits_wild, outListExits] = exits.reduce((acc, e) => {\n    let [key, click, focus, click_wild, focus_wild, outList] = acc;\n    const includeType = type => e.type?.includes(type);\n    if (isInnerRoot(e.node)) {\n      if (includeType(\"keydown\")) key = key.concat(e);\n      if (includeType(\"click\")) click = click.concat(e);\n      if (includeType(\"focus\")) focus = focus.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    } else {\n      if (includeType(\"click\")) click_wild = click_wild.concat(e);\n      if (includeType(\"focus\")) focus_wild = focus_wild.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    }\n    return [key, click, focus, click_wild, focus_wild, outList];\n  }, new Array(6).fill([]));\n\n  const hasClickExits = clickExits.length > 0;\n  const hasFocusExits = focusExits.length > 0;\n  const hasKeyExits = keyExits.length > 0;\n  \n  return {\n    keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n    clickExits_wild, focusExits_wild,\n    outListExits,\n  };\n}\n\n/** 获取（生成）出口 */\nconst getExits = function(exit, onEscape, enabledCover, cover, trigger) {\n\n  let tempExits = [].concat(exit).filter(o => o != null)\n    .map(ele => isObj(ele) ? ele : { node: ele })\n    .map(e => ({\n      ...e,\n      // undefined 表示用户没有主动设置\n      type: e.type === undefined ? [e.key == null ? '' : \"keydown\", e.node == null ? '' : \"click\"].filter(t => t !== '') : [].concat(e.type),\n    }))\n    .reduce(pickNodesAry, []);\n  let _onEscape = isFun(onEscape) ? onEscape : onEscape === true ? tempExits[0]?.on ?? (() => {}) : onEscape;\n  /** 按下 esc 的出口 */\n  const escapeExit = isFun(_onEscape) ? {\n    node: null,\n    key: isEscapeEvent,\n    on: _onEscape,\n    target: enabledCover ? cover : trigger,\n    type: [\"keydown\"],\n  } : null;\n  const exits = [escapeExit].concat(tempExits).filter(e => e != null);\n\n  return exits;\n};\n\n/** 获取聚焦或失焦时延迟的类型 */\nconst getDelayType = function(delay, processor) {\n  const isFunctionDelay = isFun(delay);\n  const delayRes = isFunctionDelay && delay(processor);\n  const promiseDelay = isFunctionDelay && objToStr(delayRes) === \"[object Promise]\" && typeof delayRes.then === \"function\";\n  const callbackDelay = isFunctionDelay && !promiseDelay;\n  const commonDelay = (delay === true) && !promiseDelay && !callbackDelay;\n  return {\n    promiseDelay,\n    callbackDelay,\n    commonDelay,\n    delayRes,\n  };\n};\n\n/** 延迟执行某些操作 */\nconst delayToProcess = function(delay, processor) {\n\n  const { promiseDelay, callbackDelay, commonDelay, delayRes } = !!delay ? getDelayType(delay, processor) : {};\n  if (promiseDelay) delayRes.then(processor);\n  else if (callbackDelay) {}\n  else if (commonDelay) processor();\n  else return true;\n};\n\n/** 获取出口或者入口的目标 */\nconst getTarget = function(target, cover, list, root, enabledCover, activeIndex, defaultTarget, e) {\n  // 空 target 走默认\n  if (target == null || target === true) {\n    if (enabledCover) return cover;\n    else return defaultTarget;\n  }\n  // 函数 target 则传入节点执行\n  else if (isFun(target)) {\n    const gotTarget = target({ e, list, cover, root, last: list[activeIndex], lastI: activeIndex });\n    if (gotTarget == null || gotTarget === true) {\n      if (enabledCover) return cover;\n      else return defaultTarget;\n    }\n    return gotTarget;\n  }\n  // 选择器字符串或者节点，则直接获取\n  else return element(target);\n};\n\n/** 保存的监听事件信息，方便监听和移除监听 */\nclass ListenersCache {\n  cache = [];\n  isEmpty = true;\n  push(node, type, handler) {\n    this.isEmpty = false;\n    this.cache.push({\n      node,\n      type,\n      handler,\n    });\n  }\n  clean() {\n    this.cache = [];\n    this.isEmpty = true;\n  }\n  addListeners() {\n    this.cache.forEach(l => l.node?.addEventListener(l.type, l.handler));\n  }\n  removeListeners() {\n    this.cache.forEach(l => l.node?.removeEventListener(l.type, l.handler));\n    this.clean();\n  }\n}\n\n/** 按键转发的缓存 */\nclass KeyForwardCache {\n  cache = new Map();\n  has(id) {\n    return this.cache.has(id);\n  }\n  push(id, node, handler) {\n    if (this.has(id)) return;\n    node.addEventListener(\"keydown\", handler);\n    this.cache.set(id, {\n      node,\n      handler,\n    })\n  }\n  remove(id) {\n    const ids = [].concat(id);\n    ids.forEach(id => this.cache.get(id).node.removeEventListener(\"keydown\", this.cache.get(id).handler));\n  }\n}\n\n/** 保存列表数据 */\nclass TabList {\n  data = [];\n  head = null;\n  tail = null;\n  prevI = -1;\n  curI = -1;\n  _prev = null;\n  _cur = null;\n  get prev() {\n    return this._prev || this.data[this.prevI] || null; // _prev 可能由于 dom 未加载而为 null，为 null 则通过 prevI 取值\n  };\n  get cur() {\n    return this._cur || this.data[this.curI] || null;\n  };\n  set prev(v) {\n    this._prev = v;\n  };\n  set cur(v) {\n    this._cur = v;\n  };\n  update(list) {\n    this.data.splice(0, this.data.length);\n    Array.prototype.push.apply(this.data, list);\n    this.head = list[0];\n    this.tail = list.at(-1);\n  };\n  isEmpty() {\n    return this.data.length === 0;\n  };\n  has(i) {\n    return !!this.data[i];\n  };\n  record(cur, curI) {\n    if (this.curI === curI // this.curI 和 curI 必须不同\n      || (this.curI < 0 && curI < 0)) // curI 为 -1 后，不会再次更新新的 -1\n      return;\n    this.recordPrev(this.cur, this.curI);\n    this.recordCur(cur, curI);\n  };\n  recordPrev(prev, prevI) {\n    this.prevI = prevI < 0 ? -1 : prevI;\n    this.prev = prev || null;\n  };\n  recordCur(cur, curI) {\n    this.curI = curI < 0 ? -1 : curI;\n    this.cur = cur || null;\n  };\n  recordSequenceByIdx(curI) {\n    this.record(this.data[curI], curI);\n  };\n}\n\nconst focusNoJutsu = (...props) => {\n  const offset = 0 - (props[0] instanceof Array);\n  const rootNode = props[0 + offset];\n  const subNodes = props[1 + offset];\n  const options  = props[2 + offset] ?? {};\n\n  if (!(Array.isArray(subNodes) && subNodes.length > 1))\n    throw new Error(\"请至少传入一个数组，数组至少包含两个可聚焦元素，用来表示列表的头和尾。\");\n\n  const {\n    /** move: tab 序列，指定可以聚焦的元素，聚焦 list 内的元素 */\n    sequence,\n    /** move: 是否循环，设置后，尾元素的下个焦点是头元素，头元素的上个焦点是尾元素 */\n    loop,\n    /** move: 自定义前进焦点函数 */\n    next,\n    /** move: 自定义后退焦点函数 */\n    prev,\n    /** focus/blur: 触发器，如果使用 focusNoJutsu.enter 则不用设置，如果使用 entry.selector 则不用设置 */\n    trigger,\n    /** focus: 触发触发器的配置 */\n    entry,\n    /** blur: 触发退出触发器的配置 */\n    exit,\n    /** blur: 按下 esc 的行为，如果未设置，则取 exit.on */\n    onEscape,\n    /** 点击列表单项的响应，行为 */\n    onClick,\n    /** 移动的时候触发 */\n    onMove,\n    /** cover: 封面，默认情况，触发入口后首先聚焦封面，而不是子元素 */\n    cover,\n    /** 初始的列表中聚焦元素的序号 */\n    initialActive,\n    /** 矫正列表的焦点 */\n    correctionTarget,\n    /** 延迟挂载非触发器元素的事件，可以是一个返回 promise 的函数，可以是一个接收回调函数的函数 */\n    delayToFocus,\n    /** 延迟失焦，触发出口后等待执行 delayToBlur 完成后失焦 */\n    delayToBlur,\n    /** 每次退出列表回到入口是否移除列表事件 */\n    removeListenersEachExit = true,\n    /** 每次进入列表是否移除入口事件 */\n    removeListenersEachEnter,\n    /** 每次退出列表是否添加入口监听事件 */\n    addEntryListenersEachExit = true,\n    /** 手动添加和移除监听事件，入口、列表、出口的监听事件，`removeListenersEachExit` 和 `removeListenersEachEnter` 将失效 */\n    manual,\n    /** 用于抹平 Safari 不同于其它浏览器，点击后 button 之类的元素不会被聚焦的问题 */\n    allowSafariToFocusAfterMousedown = true,\n    /** 用于内部调试 */\n    // demo = false,\n  } = options;\n\n  /** 入口们 */\n  const entries = [].concat(entry) // 转为数组\n    .filter(o => o != null) // 过滤空值\n    .map(ele => isObj(ele) ? ele : { node: ele }) // 元素转为对象，并且默认元素的值被看作对象的 node 属性\n    .map(entry => ({ // 对元素的属性进行默认处理\n      ...entry,\n      delay: entry.delay ?? delayToFocus,\n      type: entry.type === undefined ? [entry.key == null ? '' : \"keydown\", entry.node == null ? '' : \"click\"].filter(t => t != '') : [].concat(entry.type),\n      onExit: entry.onExit === true ? entry.on : entry.onExit, // 这个入口是开关吗\n    }))\n    .reduce(pickNodesAry, []); // 处理元素的 node 属性是数组的情况，将它分解成多个元素\n  /** 是否是空入口 */\n  const hasNoEntry = entries.length === 0;\n  /** 带切换的入口，如果 entry.onExit 有值，代表这个入口同时也是出口，也就是开关 */\n  const toggles = new Set(entries.map(e => isFun(e.onExit) ? e.node : null).filter(n => n != null).map(n => element(n)));\n  /** 默认入口，默认情况下，会从出口回到这个入口 */\n  let _trigger = element(trigger || entries[0]?.node);\n\n\n  const {\n    /** 封面节点 */\n    node: coverNode,\n    enterKey: coverEnterKey,\n    onEnter: onEnterCover,\n    exit: exitCover,\n  } = isObj(cover) ? cover : {};\n  /** 是否已经打开封面选项 */\n  const enabledCover = cover != null && cover !== false && coverNode !== false;\n  /** 封面即根元素 */\n  const coverIsRoot = enabledCover && (cover === true || coverNode === true || coverNode == null);\n  /** 退出封面，封面的出口们 */\n  const exitsCover = [].concat(exitCover) // 转为数组\n    .filter(e => e != null) // 过滤空值\n    .map(e => isObj(e) ? e : { key: e }) // 元素转为对象，并且默认元素的值被看作对象的 key 属性\n    .map(e => ({ // 对元素的属性进行默认处理\n      ...e,\n      target: e.target ?? _trigger,\n    }));\n  /** 是否使用默认的离开封面方法，也即 tab 和 shift-tab */\n  const isDefaultExitCover = enabledCover && exitsCover.length === 0;\n\n\n  /** 列表 */\n  const list = new TabList();\n\n  list.recordPrev(null, initialActive ?? -1);\n\n  const {\n    key: isNext,\n    on: onNext,\n  } = isObj(next) ? next : { key: next };\n\n  const {\n    key: isPrev,\n    on: onPrev,\n  } = isObj(prev) ? prev : { key: prev };\n\n  /** 禁用左上角 esc 出口 */\n  const disabledEsc = onEscape === false;\n\n  /** 取消循环则设置头和尾焦点 */\n  const isClamp = !(loop ?? true);\n\n  /** 是否打开列表序列，按照序列的顺序进行焦点导航 */\n  const enabledTabSequence = !!(isNext || isPrev || sequence); // 自定义前进或后退焦点函数，则设置 sequence 为 true\n\n  /** 进入了列表 */\n  let trappedList = false;\n  /** 进入了封面 */\n  let trappedCover = false;\n\n  /** 是否已添加监听事件 */\n  const listListeners = new ListenersCache();\n  /** 是否已添加入口的监听事件 */\n  const entryListeners = new ListenersCache();\n  /** 按键转发，监听事件 */\n  const keyForwards = new KeyForwardCache();\n\n  if (!manual) { // 如果不是手动添加事件，则注册入口、列表相关（封面、列表、出口）的事件\n    // 入口点击事件\n    addEntryListeners();\n\n    // 如果有入口不需要延迟，则立即加载列表的监听事件\n    const hasImmediateEntry = (hasNoEntry ? [{}] : entries).some(({ delay }) => !delay);\n\n    if (hasImmediateEntry) {\n\n      const {\n        root, list: newList, cover,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(newList);\n\n      loadListRelatedListeners(root, list, cover);\n    }\n  }\n\n  const Return = {\n    /** 调用形式的入口 */\n    enter(entry) {\n      _trigger = _trigger || getActiveElement();\n\n      if (entry) {\n        const { on, target, delay } = entry;\n        return entryHandler({ fromInvoke: true }, on, target, delay);\n      } else {\n        for (let i = 0; i < entries.length; ++ i) {\n          const { on, type, node, target, delay } = entries[i];\n          const invokeType = \"invoke\";\n\n          if (type?.some(type => type == null || type === false || type === invokeType) || node == null) {\n            return entryHandler({ fromInvoke: true }, on, target, delay);\n          }\n        }\n        return entryHandler({ fromInvoke: true });\n      }\n    },\n    /** 调用形式的出口 */\n    exit(tempExit) {\n\n      const {\n        list: newList,\n        cover,\n        root,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n      if (tempExit) {\n        const { on, target: originTarget } = tempExit;\n        const target = element(originTarget);\n        return toExit(target, on);\n      } else {\n        const exits = getExits(exit, onEscape, enabledCover, cover, _trigger);\n        for (let i = 0; i < exits.length; ++ i) {\n          const { on, type, target } = exits[i];\n          const invokeType = \"invoke\";\n  \n          if (type?.some(type => type == null || type === false || type === invokeType)) {\n            return toExit(target, on);\n          }\n        }\n      }\n\n      function toExit(target, on) {\n\n        if (list.isEmpty()) list.update(newList);\n\n        return exitHandler({ fromInvoke: true }, on, target, false, cover, list.data, root);\n      }\n    },\n    /** 移除所有的监听事件 */\n    removeListeners() {\n      listListeners.removeListeners();\n      entryListeners.removeListeners();\n    },\n    /** 移除列表相关的事件 */\n    removeListRelatedListeners() {\n      listListeners.removeListeners();\n    },\n    /** 移除入口事件 */\n    removeEntryListeners() {\n      entryListeners.removeListeners();\n    },\n    /** 添加入口的监听事件 */\n    addEntryListeners() {\n      addEntryListeners();\n    },\n    /** 添加列表相关（封面、列表、出口）的监听事件 */\n    addListRelatedListeners() {\n\n      const {\n        root,\n        list: newList,\n        cover,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      if (list.isEmpty()) list.update(newList);\n\n      loadListRelatedListeners(root, list, cover);\n    },\n    /** 添加转发 */\n    addForward(id, forward) {\n      let opts = null;\n      if (isFun(forward)) {\n        const {\n          root,\n          list: listData, head, tail,\n          cover,\n        } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n        opts = forward({ root, list: listData, head, tail, cover, curI: list.curI, prevI: list.prevI });\n      }\n      else opts = forward;\n\n      const { node: origin_node, on, key, target: origin_target } = opts;\n      const node = element(origin_node);\n      const target = element(origin_target);\n      keyForwards.push(id, node, e => {\n        if (key?.(e, list.prevI, list.curI)) {\n          e.preventDefault();\n          on?.();\n          tickFocus(target);\n        }\n      });\n    },\n    /** 移除转发 */\n    removeForward(id) {\n      keyForwards.remove(id);\n    },\n    /** 更新列表 */\n    updateList(newList) {\n      const _newList = newList.map(item => element(item)).filter(item => item != null);\n      list.update(_newList);\n    },\n    /** 当前聚焦的列表单项序号 */\n    i(newI) {\n      if (list.has(newI) && trappedList) {\n        list.recordSequenceByIdx(newI);\n        const { prev, prevI, cur, curI } = list;\n        onMove?.({ e: { fromI: true }, prev, prevI, cur, curI });\n        focus(subNodes[curI]);\n        return newI;\n      }\n      else return list.curI < 0 ? list.prevI : list.curI;\n    },\n  };\n\n  return Return;\n\n  /** 入口 handler */\n  function entryHandler(e, onEnter, target, delay) {\n\n    // 如果已经在列表或者封面，则不再触发入口；出口不需要该操作，因为不存在从出口退出到出口的子元素的情况，相反，存在入口进入到入口子元素的情况。\n    if (trappedCover || trappedList) return;\n\n    Promise.resolve(onEnter?.(e)).then(_ => {\n      const isImmediate = !delay;\n      if (isImmediate) findNodesToLoadListenersAndFocus();\n      else delayToProcess(delay, findNodesToLoadListenersAndFocus);\n    })\n\n    /** 寻找节点，加载事件监听器，聚焦 subNodes 或 coverNode */\n    function findNodesToLoadListenersAndFocus() {\n      const {\n        root,\n        list: newList,\n        cover,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(newList);\n\n      if (!manual)\n        loadListRelatedListeners(root, list, cover);\n      if (target !== false)\n        focusTarget(cover, list, root);\n    }\n    \n    function focusTarget(cover, listInfo, rootNode) {\n      const list = listInfo.data;\n      const { prev, head, curI } = listInfo;\n      const defaultTarget = prev || head;\n      const gotTarget = getTarget(target, cover, list, rootNode, enabledCover, curI, defaultTarget, e);\n      const targetIdx = list.indexOf(gotTarget);\n      if (targetIdx > -1) {\n        if (enabledTabSequence) { // onMove 仅支持打开 sequence 后\n          listInfo.recordSequenceByIdx(targetIdx); // 只有在聚焦列表元素时才设置，否则会破坏原有 curI\n          const { cur, curI } = listInfo;\n          onMove?.({ e, prev: null, cur, prevI: -1, curI });\n        }\n        trappedList = true;\n      }\n      if (enabledCover && (gotTarget === cover || targetIdx > -1)) trappedCover = true;\n      tickFocus(gotTarget);\n    }\n  }\n\n  /** 出口 handler */\n  function exitHandler(e, on, target, delay, cover, listData, root, ef) {\n\n    if (!trappedList || \n      !(isFun(ef) ? ef({ e, prev: list.prev, cur: list.cur, prevI: list.prevI, curI: list.curI }) : true))\n      return false;\n\n    list.recordSequenceByIdx(-1);\n\n    trappedList = false;\n\n    e.preventDefault?.(); // 阻止默认行为，例如 tab 到下一个元素，例如 entry button 触发 click 事件\n\n    const gotTarget = getTarget(target, cover, listData, root, enabledCover, list.curI, _trigger, e);\n\n    if (gotTarget) return exitListWithTarget();\n    else return exitListWithoutTarget();\n\n    /** 退出列表，有 target */\n    function exitListWithTarget() {\n\n      Promise.resolve(on?.(e)).then(_ => {\n        delay = delay ?? delayToBlur;\n        const isImmediate = delayToProcess(delay, focusThenRemoveListeners);\n        if (isImmediate) focusThenRemoveListeners();\n      });\n\n      function focusThenRemoveListeners() {\n        focus(gotTarget);\n        enabledTabSequence && onMove?.({ e, prev: list.prev, cur: null, prevI: list.prevI, curI: -1 });\n        if (!manual) {\n          if (gotTarget !== cover)\n            removeListRelatedListeners();\n          if (addEntryListenersEachExit)\n            addEntryListeners();\n        }\n      }\n    }\n\n    /** 退出列表，无 target */\n    function exitListWithoutTarget() {\n\n      Promise.resolve(on?.(e)).then(_ => {\n\n        if (gotTarget === false) { // 如果显式设为 false，则直接退出，不聚焦，会在一个列表退出另一个列表移动的场景使用\n\n          const removeListenersWithoutFocus = focusThenRemoveListeners();\n          removeListenersWithoutFocus();\n          return ;\n        }\n        if (enabledCover) {\n\n          enabledTabSequence && onMove?.({ e, prev: list.prev, cur: null, prevI: list.prevI, curI: -1 });\n          focus(cover);\n        } else {\n  \n          delay = delay ?? delayToBlur;\n          const focusTriggerThenRemoveListeners = focusThenRemoveListeners(_trigger);\n          const isImmediate = delayToProcess(delay, focusTriggerThenRemoveListeners);\n          if (isImmediate) focusTriggerThenRemoveListeners();\n        }\n      });\n\n      function focusThenRemoveListeners(focusTarget) {\n        return _ => {\n          focusTarget && focus(focusTarget);\n          enabledTabSequence && onMove?.({ e, prev: list.prev, cur: null, prevI: list.prevI, curI: -1 });\n          if (!manual) {\n            removeListRelatedListeners();\n            if (addEntryListenersEachExit)\n              addEntryListeners();\n          }\n        }\n      }\n    }\n  }\n\n  /** 生成事件行为，添加事件监听器 */\n  function loadListRelatedListeners(root, listInfo, cover) {\n\n    const list = listInfo.data;\n    const head = listInfo.head;\n    const tail = listInfo.tail;\n\n    if (!listListeners.isEmpty) return ; // 列表的监听事件没有移除之前，不需要再次添加列表监听事件\n\n    if (root == null)\n      throw new Error(`没有找到元素 ${rootNode}，您可以尝试 delayToFocus 选项，等待元素 ${rootNode} 渲染完毕后进行聚焦。`);\n    if (head == null || tail == null)\n      throw new Error(\"至少需要包含两个可以聚焦的元素，如果元素需要等待渲染，您可以尝试 delayToFocus 选项。\");\n\n    // 添加除 trigger 以外其它和焦点相关的事件监听器\n    addListRelatedListeners();\n\n    /** 添加焦点需要的事件监听器 */\n    function addListRelatedListeners() {\n\n      const useActiveIndex = () => [listInfo.curI, listInfo.recordSequenceByIdx.bind(listInfo)];\n\n      const isTrappedList = () => hasNoEntry ? true : trappedList;\n\n      // 在焦点循环中触发聚焦\n      const keyListMoveHandler = enabledTabSequence ?\n        focusNextListItemBySequence(list, useActiveIndex, isClamp, isNext, isPrev, onNext, onPrev, cover, onMove, isTrappedList) :\n        focusNextListItemByRange(list, isClamp, onNext, onPrev, root, cover, isTrappedList);\n\n      /** 出口们，列表的出口们，list 的出口们 */\n      const exits = getExits(exit, onEscape, enabledCover, cover, _trigger);\n      const {\n        keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n        clickExits_wild, focusExits_wild,\n        outListExits,\n      } = splitExits(exits, root);\n\n      /** 非跟节点内的，是根节点之外的出口 */\n      const clickListExitHandlers_wild = clickExits_wild.map(exit => [element(exit?.node), clickListExitHandler_wild(exit)]);\n      const focusListExitHandlers_wild = focusExits_wild.map(exit => [element(exit?.node), focusListExitHandler_wild(exit)]);\n\n      listListeners.push(root, \"focusin\", focusTrapListHandler);\n\n      listListeners.push(root, \"focusout\", blurTrapListHandler);\n\n      if (!root.contains(cover) && cover != null) {\n\n        listListeners.push(cover, \"focus\", focusTrapCoverHandler);\n\n        listListeners.push(cover, \"blur\", blurTrapCoverHandler);\n      }\n\n      listListeners.push(root, \"keydown\", e => {\n        // 列表中移动，监听移动的键盘事件，例如 tab 或其它自定义组合键\n        keyListMoveHandler(e);\n        // 列表键盘出口\n        if (hasKeyExits) keyListExitHandler(e);\n      });\n\n      if (enabledTabSequence || hasClickExits) {\n        listListeners.push(root, \"click\", e => {\n          // 点击聚焦列表单项，只在手动列表时监听点击，因为自动模式不需要记录 list.curI\n          enabledTabSequence && clickListItemHandler(e);\n          // 列表点击出口\n          hasClickExits && clickListExitHandler(e);\n        });\n      }\n\n      // 由于 click 事件在 focus 之后，这里用来判断是否通过点击进入列表，用于纠错未知进入列表的焦点定位\n      listListeners.push(root, \"mousedown\", mousedownListItemHandler);\n\n      if (hasFocusExits) {\n        // 列表聚焦出口\n        listListeners.push(root, \"focusin\", focusListExitHandler);\n      }\n\n      // 非列表内的出口\n      focusListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"focus\", handler);\n      });\n      clickListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"click\", handler);\n      });\n\n      if (cover != null) {\n        // 封面的事件\n        listListeners.push(cover, \"keydown\", keyCoverHandler);\n      }\n\n      // flush\n      listListeners.addListeners();\n\n\n\n      let isMouseDown = false;\n      /** 标记是否从封面进入列表，用于防止纠正列表焦点的误判，用于野生封面 */\n      let isEnterFromCover = false;\n\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n       |          LIST HANDLERS          |\n       +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function focusTrapListHandler(e) {\n\n        // 进入封面（封面在列表中）\n        if (enabledCover && e.target === cover) { // TODO: 保留确认，或是否需要添加 `&& trappedList` 条件\n          trappedCover = true;\n          return ;\n        }\n\n        // 纠正进入封面，从外部进入列表，如果没有通过封面，则重新聚焦封面\n        if (enabledCover && isMouseDown === false && trappedCover === false) {\n          tickFocus(cover);\n          return ;\n        }\n\n        // 纠正外部聚焦进来的焦点\n        if (correctionTarget !== false && enabledTabSequence && trappedList === false && isMouseDown === false) // 如果是内部的聚焦，无需纠正，防止嵌套情况的循环问题\n        {\n          const defaultLast = listInfo.prev || listInfo.head;\n          const originGotCorrectionTarget = correctionTarget?.({ list, cover, root, last: listInfo.prev, lastI: listInfo.prevI }) ?? defaultLast;\n          const gotCorrectionTarget = element(originGotCorrectionTarget);\n          const targetIndex = list.findIndex(item => item === gotCorrectionTarget);\n          if (targetIndex > -1) {\n            listInfo.recordSequenceByIdx(targetIndex);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n          }\n\n          trappedList = true; // 在下一次 触发 focusin 调用 focusTrapListHandler 之前，设为 true。通过 api 调用的 focus，触发的 focusin 事件会被“同步”调用\n          tickFocus(gotCorrectionTarget);\n        }\n\n        trappedList = true; // 无论列表的类型是序列还是范围，被聚焦后都被定义为“已陷入列表”（这里主要用于范围列表模式）\n      }\n\n      function blurTrapListHandler(e) {\n        // 用于保护可切换的入口能够被触发\n        if (toggles.has(e.relatedTarget)) return;\n\n        tick(() => { // 延迟后获取下一次聚焦的元素，否则当前聚焦元素是 body\n\n          const active = getActiveElement();\n          const isOutRootNode = !root.contains(active);\n          const isActiveCover = active === cover;\n\n          // 从封面退出\n          if (e.target === cover && isOutRootNode) {\n            trappedCover = false; // 退出封面\n            return;\n          }\n\n          let isOutList = null;\n          if (isActiveCover || isOutRootNode) {\n            isOutList = outListExitHandler(e);\n            listInfo.recordSequenceByIdx(-1);\n          }\n          if (isOutList === false) return; // 不符合 outlist 退出列表的条件\n\n          if (isActiveCover) { // 聚焦在封面\n            trappedList = false;\n          } else if (isOutRootNode) { // 聚焦在非封面、非列表的区域\n            trappedList = false;\n            trappedCover = false;\n          }\n        });\n      }\n\n      function mousedownListItemHandler(e) {\n        isMouseDown = true;\n        tick(() => isMouseDown = false); // mousedown 没有出口，只能使用定时器，isMouseDown 主要在两个 focus 事件中使用，当触发 focus 时，此定时器还未执行，以此保证正确性\n\n        let targetItem;\n        if (!enabledTabSequence || // 未打开 sequence 属性 或者\n          (enabledTabSequence && // 已打开 sequence 属性 并且\n            (targetItem = list.find(item => item.contains(e.target))) // 点击的目标是列表中的元素\n          )\n        ) {\n          trappedList = true;\n          if (enabledCover) trappedCover = true;\n          // 兼容 Safari（桌面端），具体问题查看：https://github.com/wswmsword/web-experiences/tree/main/browser/safari-button-focus\n          if (allowSafariToFocusAfterMousedown && targetItem && window.safari !== undefined) {\n            focus(targetItem); // Safari 不会聚焦按钮元素，这里强制使用 api 聚焦\n            e.preventDefault(); // 阻止默认行为可以避免 targetItem 失焦\n          }\n        }\n      }\n\n      /** 点击聚焦列表某一单项 */\n      function clickListItemHandler(e) {\n        const targetIndex = list.findIndex(item => item.contains(e.target));\n        if (targetIndex > -1) {\n          const { prev: prevBeforeRecord, prevI: prevIBeforeRecord, curI: curIBeforeRecord } = listInfo;\n          listInfo.recordSequenceByIdx(targetIndex);\n\n          let { prev, prevI, cur, curI } = listInfo;\n          if (curIBeforeRecord < 0) { // 从外部进入\n            if (prevIBeforeRecord !== targetIndex) { // 上一次进入 和 本次进入 的元素不同\n              prev = prevBeforeRecord;\n              prevI = prevIBeforeRecord;\n            }\n          }\n\n          onClick?.({ e, prev, cur, prevI, curI });\n          if (curIBeforeRecord !== curI) // 从外部进入 或者 列表内的移动\n            onMove?.({ e, prev, cur, prevI, curI });\n        }\n      }\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |         COVER HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function focusTrapCoverHandler() { trappedCover = true; } // 捕获点击封面的情况\n\n      function blurTrapCoverHandler() { // 捕获点击空白区域的情况\n        if (isEnterFromCover) // 用于防止纠正列表焦点的误判，如果是进入列表，则 trappedCover 还应是 true\n          isEnterFromCover = false;\n        else\n          trappedCover = false;\n      }\n\n      /** 封面的键盘事件响应 */\n      function keyCoverHandler(e) {\n        if (e.target !== cover) return;\n        if (!(trappedCover && !trappedList)) return; // 继续执行，必须满足焦点在封面上，且不在列表中\n\n        // 入口（封面），从封面进入列表\n        if((coverEnterKey ?? isEnterEvent)(e) && !trappedList) {\n          e.preventDefault();\n          isEnterFromCover = true;\n          trappedList = true;\n          onEnterCover?.(e);\n          if (enabledTabSequence) {\n            listInfo.recordSequenceByIdx(Math.max(0, listInfo.prevI));\n            focus(listInfo.cur);\n            onMove?.({ e, prev: null, cur: listInfo.cur, prevI: -1, curI: listInfo.curI });\n          } else\n            focus(listInfo.data[0]);\n          return;\n        }\n\n        // 出口（封面），从封面回到入口\n        for (let i = 0; i < exitsCover.length; ++ i) {\n          const { key, on, target: origin } = exitsCover[i];\n          const target = element(origin);\n          if (key?.(e, listInfo.prevI, listInfo.curI)) {\n            exitCoverHandler(e, on, target);\n            return;\n          }\n        }\n\n        // 默认出口，默认行为，默认的行为的场景是包含子元素的长列表\n        if (isDefaultExitCover &&\n          isTabForward(e)) { // 虽然也是离开列表，但是这里不移除监听事件，因为移除后就不能再次进入封面\n          focus(tail);\n          return;\n        }\n\n        /** 退出封面焦点的行为 */\n        function exitCoverHandler(e, onExit, target) {\n          onExit?.(e);\n          target && focus(target);\n          removeListRelatedListeners();\n        }\n      }\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |            + START +            |\n      |          EXIT HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n      function outListExitHandler(e) {\n        for (let i = 0; i < outListExits.length; ++ i) {\n          const { on, target: origin_target, delay } = outListExits[i];\n          const target = element(origin_target);\n          return exitHandler(e, on, target, delay, cover, list, root, outListExits[i].if);\n        }\n      }\n\n      function exitHandlerWithCondition(e, exit, condition) {\n        const { node: origin_node, on, target: origin_target, delay } = exit;\n        const node = element(origin_node);\n        const target = element(origin_target);\n\n        if (condition(e, node, exit.key)) // 未设置点击目标\n          return false;\n        exitHandler(e, on, target, delay, cover, list, root, exit.if);\n        return true;\n      }\n\n      function clickExitHandler(e, exit) {\n\n        const cantClick = (e, node) => (node != null && !node.contains(e.target)) || node == null; // 点击目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantClick);\n      }\n\n      /** 点击列表的出口 */\n      function clickListExitHandler(e) {\n        for (let i = 0; i < clickExits.length; ++ i) {\n          const isOK = clickExitHandler(e, clickExits[i]);\n          if (isOK) break; // 只生效第一个满足条件的出口\n        }\n      }\n\n      function focusExitHandler(e, exit) {\n\n        const cantFocus = (e, node) => (node != null && e.target !== node) || node == null; // 聚焦目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantFocus);\n      }\n\n      /** 聚焦列表一个单项而退出 */\n      function focusListExitHandler(e) {\n\n        for (let i = 0; i < focusExits.length; ++ i) {\n          const isOK = focusExitHandler(e, focusExits[i])\n          if (isOK) break;\n        }\n      }\n\n      function keyExitHandler(e, exit) {\n\n        const cantKey = (e, node, key) => (node != null && e.target !== node) || (!key?.(e, listInfo.prevI, listInfo.curI)); // 聚焦目标不匹配 或者 未设置点击目标\n        return exitHandlerWithCondition(e, exit, cantKey);\n      }\n\n      /** 触发键盘退出列表，退出列表焦点 */\n      function keyListExitHandler(e) {\n        if (e.target === cover) return; // 被封面触发直接返回\n\n        if (disabledEsc && isEscapeEvent(e)) return;\n\n        for (let i = 0; i < keyExits.length; ++ i) {\n          const isOK = keyExitHandler(e, keyExits[i]);\n          if (isOK) break;\n        }\n      }\n\n      function clickListExitHandler_wild(exit) {\n        return function(e) { clickExitHandler(e, exit); }\n      }\n\n      function focusListExitHandler_wild(exit) {\n        return function(e) { focusExitHandler(e, exit); }\n      }\n\n      /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n      |             - END -             |\n      |          EXIT HANDLERS          |\n      +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n    };\n  }\n\n  /** 添加入口事件 */\n  function addEntryListeners() {\n\n    if (!entryListeners.isEmpty) return;\n\n    for (let i = 0; i < entries.length; ++ i) {\n      const entry = entries[i];\n      const { node: origin, on, key, type, target, delay, onExit } = entry;\n      const ef = entry.if;\n      const types = [].concat(type);\n      const allTypes = [\"keydown\", \"focus\", \"click\"];\n      const node = element(origin);\n\n      types.forEach(type => {\n        if (node && allTypes.includes(type)) {\n\n          /** 是否是键盘事件 */\n          const isKey = type === \"keydown\";\n          /** 如果是键盘事件，则判断键位是否匹配，如果是非键盘事件，则直接返回 true */\n          const ifKey = isKey ? e => key?.(e, list.prevI, list.curI) : _ => true;\n          entryListeners.push(node, type, toggleHandler(ifKey, isKey)); // 保存事件信息\n        }\n      });\n      \n      function toggleHandler(ifKey, isKey) {\n        return e => {\n          if (\n            (isFun(ef)\n              ? ef({ e, prev: list.prev, cur: list.cur, prevI: list.prevI, curI: list.curI })\n              : true) &&\n            ifKey(e))\n            toggleEntryAndExit(e, isKey);\n        }\n      }\n\n      function toggleEntryAndExit(e, isKey) {\n\n        /** 是否执行 */\n        let processed = 0;\n        if (trappedList) {\n          if (isFun(onExit)) { // 若存在 onExit，则表示该入口同时是出口，是开关\n            const { list, cover, root } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n            exitHandler(e, onExit, target, false, cover, list, root);\n            processed = !processed;\n          }\n        }\n        else {\n          entryHandler(e, on, target, delay);\n          if (removeListenersEachEnter && !manual)\n            entryListeners.removeListeners();\n          processed = !processed;\n        }\n\n        // 如果是键盘事件，并且已执行，则阻止默认行为\n        if (isKey && processed) e.preventDefault();\n      }\n    }\n\n    // flush\n    entryListeners.addListeners();\n  }\n\n  /** 移除监听事件 */\n  function removeListRelatedListeners() {\n\n    // 如果是默认的，没有定义出口的封面，则不移除事件\n    if (isDefaultExitCover) return;\n\n    if (removeListenersEachExit && !manual) {\n      listListeners.removeListeners();\n    }\n  }\n};\n\nexport default focusNoJutsu;"],"names":["objToStr","obj","Object","prototype","toString","call","isObj","isFun","fun","getActiveElement","document","activeElement","querySelector","str","element","e","tick","fn","setTimeout","isSelectableInput","node","tagName","toLowerCase","select","isEnterEvent","key","keyCode","isEscapeEvent","isTabEvent","isTabForward","shiftKey","isTabBackward","findLowestCommonAncestorNode","x","y","contains","range","Range","setStartBefore","setEndAfter","collapsed","commonAncestorContainer","focus","tickFocus","focusNextListItemBySequence","subNodes","useActiveIndex","isClamp","isNext","isPrev","onNext","onPrev","coverNode","onMove","trappedList","target","_useActiveIndex","index_","setIndex","index","Math","max","itemsLen","length","incresedI","nextI","min","prev","cur","prevI","curI","preventDefault","decresedI","focusNextListItemByRange","list","rootNode","head","tail","at","current","getKeyNodes","originRoot","originList","originCover","coverIsRoot","_element","map","item","filter","slice","root","cover","pickNodesAry","acc","isAryNodes","Array","isArray","nodes","n","_extends","concat","splitExits","exits","isInnerRoot","_exits$reduce","reduce","click","click_wild","focus_wild","outList","includeType","type","_e$type","includes","fill","keyExits","clickExits","focusExits","clickExits_wild","focusExits_wild","outListExits","hasClickExits","hasFocusExits","hasKeyExits","getExits","exit","onEscape","enabledCover","trigger","_tempExits$0$on","_tempExits$","tempExits","o","ele","undefined","t","_onEscape","on","escapeExit","getDelayType","delay","processor","isFunctionDelay","delayRes","promiseDelay","then","callbackDelay","commonDelay","delayToProcess","_ref","getTarget","activeIndex","defaultTarget","gotTarget","last","lastI","ListenersCache","cache","isEmpty","_proto","push","handler","clean","addListeners","forEach","l","_l$node","addEventListener","removeListeners","_l$node2","removeEventListener","KeyForwardCache","Map","_proto2","has","id","set","remove","_this","ids","get","TabList","data","_prev","_cur","_proto3","update","splice","apply","i","record","recordPrev","recordCur","recordSequenceByIdx","_createClass","v","focusNoJutsu","_ref2","_entries$","offset","arguments","options","Error","sequence","loop","next","entry","onClick","initialActive","correctionTarget","delayToFocus","delayToBlur","_options$removeListen","removeListenersEachExit","removeListenersEachEnter","_options$addEntryList","addEntryListenersEachExit","manual","_options$allowSafariT","allowSafariToFocusAfterMousedown","entries","_entry$delay","onExit","hasNoEntry","toggles","Set","_trigger","_ref3","coverEnterKey","enterKey","onEnterCover","onEnter","exitCover","exitsCover","_e$target","isDefaultExitCover","_ref4","_ref5","disabledEsc","enabledTabSequence","trappedCover","listListeners","entryListeners","keyForwards","addEntryListeners","hasImmediateEntry","some","_ref6","_getKeyNodes","newList","loadListRelatedListeners","Return","enter","entryHandler","fromInvoke","_loop","_entries$i","invokeType","_ret","tempExit","_getKeyNodes2","originTarget","toExit","_loop2","_exits$i","_ret2","exitHandler","removeListRelatedListeners","removeEntryListeners","addListRelatedListeners","_getKeyNodes3","addForward","forward","opts","_getKeyNodes4","listData","_opts","origin_node","origin_target","removeForward","updateList","_newList","newI","fromI","Promise","resolve","_","isImmediate","findNodesToLoadListenersAndFocus","_getKeyNodes5","focusTarget","listInfo","targetIdx","indexOf","ef","_e$preventDefault","exitListWithTarget","exitListWithoutTarget","_delay","focusThenRemoveListeners","removeListenersWithoutFocus","_delay2","focusTriggerThenRemoveListeners","bind","isTrappedList","keyListMoveHandler","_splitExits","clickListExitHandlers_wild","clickListExitHandler_wild","focusListExitHandlers_wild","focusListExitHandler_wild","focusTrapListHandler","blurTrapListHandler","focusTrapCoverHandler","blurTrapCoverHandler","keyListExitHandler","clickListItemHandler","clickListExitHandler","mousedownListItemHandler","focusListExitHandler","_ref7","_ref8","keyCoverHandler","isMouseDown","isEnterFromCover","_correctionTarget","defaultLast","originGotCorrectionTarget","gotCorrectionTarget","targetIndex","findIndex","relatedTarget","active","isOutRootNode","isActiveCover","isOutList","outListExitHandler","targetItem","find","window","safari","prevBeforeRecord","prevIBeforeRecord","curIBeforeRecord","_exitsCover$i","origin","exitCoverHandler","_outListExits$i","exitHandlerWithCondition","condition","clickExitHandler","cantClick","isOK","focusExitHandler","cantFocus","keyExitHandler","cantKey","_loop3","types","allTypes","isKey","ifKey","toggleHandler","toggleEntryAndExit","processed","_getKeyNodes6"],"mappings":"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"}